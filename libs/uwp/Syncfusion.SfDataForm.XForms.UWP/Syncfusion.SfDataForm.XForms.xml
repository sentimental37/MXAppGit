<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.SfDataForm.XForms</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.XForms.DataForm.ConverterAttribute">
            <summary>
            Specifies the converter <see cref="!:IPropertyValueConverter"/> for the data field to convert the value before reading and saving in DataForm. 
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.ConverterAttribute"/> class.
            </summary>
            <param name="converter">
            The type of <see cref="!:IPropertyValueConverter"/> for data field.
            </param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="!:IPropertyValueConverter"/> type.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataTypeAttribute">
            <summary>
            Allows for clarification of the <see cref="P:Syncfusion.XForms.DataForm.DataTypeAttribute.DataType"/> represented by a given
            property (such as <see cref="!:System.ComponentModel.DataAnnotations.DataType.PhoneNumber"/>
            or <see cref="!:System.ComponentModel.DataAnnotations.DataType.Url"/>)
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataTypeAttribute.DataType">
            <summary>
            Gets the DataType. If it equals DataType.Custom, <see cref="P:Syncfusion.XForms.DataForm.DataTypeAttribute.CustomDataType"/> should also be retrieved.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataTypeAttribute.CustomDataType">
            <summary>
            Gets the string representing a custom data type. Returns a non-null value only if <see cref="P:Syncfusion.XForms.DataForm.DataTypeAttribute.DataType"/> is DataType.Custom.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataTypeAttribute.GetDataTypeName">
            <summary>
            Return the name of the data type, either using the <see cref="P:Syncfusion.XForms.DataForm.DataTypeAttribute.DataType"/> enum or <see cref="P:Syncfusion.XForms.DataForm.DataTypeAttribute.CustomDataType"/> string
            </summary>
            <returns>The name of the data type enum</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataTypeAttribute.DisplayFormat">
            <summary>
            Gets the default display format that gets used along with this DataType.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataTypeAttribute.#ctor(Syncfusion.XForms.DataForm.DataType)">
            <summary>
            Constructor that accepts a data type enumeration
            </summary>
            <param name="dataType">The <see cref="P:Syncfusion.XForms.DataForm.DataTypeAttribute.DataType"/> enum value indicating the type to apply.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataTypeAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the string name of a custom data type
            </summary>
            <param name="customDataType">The string name of the custom data type.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataTypeAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)"/>
            </summary>
            <remarks>This override always returns <c>true</c>.  Subclasses should override this to provide the correct result.</remarks>
            <param name="value">The value to validate</param>
            <returns>Unconditionally returns <c>true</c></returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataTypeAttribute.EnsureValidDataType">
            <summary>
            Throws an exception if this attribute is not correctly formed
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataType">
            <summary>
            Enumeration of logical data types that may appear in <see cref="T:Syncfusion.XForms.DataForm.DataTypeAttribute"/>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Custom">
            <summary>
            Custom data type, not one of the static data types we know
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.DateTime">
            <summary>
            DateTime data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Date">
            <summary>
            Date data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Time">
            <summary>
            Time data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Duration">
            <summary>
            Duration data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.PhoneNumber">
            <summary>
            Phone number data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Currency">
            <summary>
            Currency data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Text">
            <summary>
            Plain text data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Html">
            <summary>
            Html data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.MultilineText">
            <summary>
            Multiline text data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.EmailAddress">
            <summary>
            Email address data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Password">
            <summary>
            Password data type -- do not echo in UI
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Url">
            <summary>
            URL data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.ImageUrl">
            <summary>
            URL to an Image -- to be displayed as an image instead of text
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.CreditCard">
            <summary>
            Credit card data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.PostalCode">
            <summary>
            Postal code data type
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.DataType.Upload">
            <summary>
            File upload data type
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DisplayAttribute">
            <summary>
            DisplayAttribute is a general-purpose attribute to specify user-visible globalizable strings for types and members.
            The string properties of this class can be used either as literals or as resource identifiers into a specified
            <see cref="!:ResourceType"/>
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayAttribute.#ctor">
            <summary>
            Default constructor for DisplayAttribute.  All associated string properties and methods will return <c>null</c>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayAttribute.ShortName">
            <summary>
            Gets or sets the ShortName attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetShortName"/> method to retrieve the UI display string.
            </para>
            </summary>
            <value>
            The short name is generally used as the grid column label for a UI element bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>    
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayAttribute.Name">
            <summary>
            Gets or sets the Name attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetName"/> method to retrieve the UI display string.
            </para>
            </summary>        
            <value>
            The name is generally used as the field label for a UI element bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>        
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayAttribute.Description">
            <summary>
            Gets or sets the Description attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetDescription"/> method to retrieve the UI display string.
            </para>
            </summary>    
            <value>
            Description is generally used as a tool tip or description a UI element bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>      
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayAttribute.Prompt">
            <summary>
            Gets or sets the Prompt attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetPrompt"/> method to retrieve the UI display string.
            </para>
            </summary>
            <value>
            A prompt is generally used as a prompt or watermark for a UI element bound to the member
            bearing this attribute.  A <c>null</c> or empty string is legal, and consumers must allow for that.
            </value>        
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayAttribute.GroupName">
            <summary>
            Gets or sets the GroupName attribute property, which may be a resource key string.
            <para>
            Consumers must use the <see cref="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetGroupName"/> method to retrieve the UI display string.
            </para>
            </summary>
            <value>
            A group name is used for grouping fields into the UI.  A <c>null</c> or empty string is legal,
            and consumers must allow for that.
            </value>       
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayAttribute.AutoGenerateField">
            <summary>
            Gets or sets whether UI should be generated automatically to display this field. If this property is not
            set then the presentation layer will automatically determine whether UI should be generated. Setting this
            property allows an override of the default behavior of the presentation layer.
            <para>
            Consumers must use the <see cref="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetAutoGenerateField"/> method to retrieve the value, as this property getter will throw
            an exception if the value has not been set.
            </para>
            </summary>   
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayAttribute.Order">
            <summary>
            Gets or sets the order in which this field should be displayed.  If this property is not set then
            the presentation layer will automatically determine the order.  Setting this property explicitly
            allows an override of the default behavior of the presentation layer.
            <para>
            Consumers must use the <see cref="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetOrder"/> method to retrieve the value, as this property getter will throw
            an exception if the value has not been set.
            </para>
            </summary> 
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetShortName">
            <summary>
            Gets the UI display string for ShortName.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.ShortName"/> or the
            localized string found when <see cref="!:ResourceType"/> has been specified and <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.ShortName"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            The value of
            <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.ShortName"/> will be returned.
            </returns>        
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetName">
            <summary>
            Gets the UI display string for Name.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Name"/> or the
            localized string found when <see cref="!:ResourceType"/> has been specified and <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Name"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            The value of
            <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Name"/> will be returned.
            </returns>      
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetDescription">
            <summary>
            Gets the UI display string for Description.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Description"/> or the
            localized string found when <see cref="!:ResourceType"/> has been specified and <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Description"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            The value of
            <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Description"/> will be returned.
            </returns>    
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetPrompt">
            <summary>
            Gets the UI display string for Prompt.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Prompt"/> or the
            localized string found when <see cref="!:ResourceType"/> has been specified and <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Prompt"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            The value of
            <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Prompt"/> will be returned.
            </returns>  
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetGroupName">
            <summary>
            Gets the UI display string for GroupName.
            <para>
            This can be either a literal, non-localized string provided to <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.GroupName"/> or the
            localized string found when <see cref="!:ResourceType"/> has been specified and <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.GroupName"/>
            represents a resource key within that resource type.
            </para>
            </summary>
            <returns>
            The value of
            <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.GroupName"/> will be returned.        
            </returns>      
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetAutoGenerateField">
            <summary>
            Gets the value of <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.AutoGenerateField"/> if it has been set, or <c>null</c>.
            </summary>
            <returns>
            When <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.AutoGenerateField"/> has been set returns the value of that property.
            <para>
            When <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.AutoGenerateField"/> has not been set returns <c>null</c>.
            </para>
            </returns>      
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayAttribute.GetOrder">
            <summary>
            Gets the value of <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Order"/> if it has been set, or <c>null</c>.
            </summary>
            <returns>
            When <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Order"/> has been set returns the value of that property.
            <para>
            When <see cref="P:Syncfusion.XForms.DataForm.DisplayAttribute.Order"/> has not been set returns <c>null</c>.
            </para>
            </returns>
            <remarks>
            When an order is not specified, presentation layers should consider using the value
            of 10000.  This value allows for explicitly-ordered fields to be displayed before
            and after the fields that don't specify an order.
            </remarks>     
        </member>
        <member name="T:Syncfusion.XForms.DataForm.BindableAttribute">
            <summary>
            Initializes a new instance of the BindableTypeAttribute class.
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.BindableAttribute.Yes">
            <summary>
               <para>
                  Specifies that a property is appropriate to bind data to. This
               <see langword='static '/>field is read-only. 
               </para>
            </summary>             
        </member>
        <member name="F:Syncfusion.XForms.DataForm.BindableAttribute.No">
            <summary>
               <para>
                  Specifies that a property is not appropriate to bind
                  data to. This <see langword='static '/>field is read-only.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.BindableAttribute.Default">
            <summary>
               <para>
                  Specifies the default value for the <see cref='!:System.ComponentModel.BindableAttribute'/>,
                  which is <see cref='!:System.ComponentModel.BindableAttribute.No'/>. This <see langword='static '/>field is
                  read-only.
               </para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.XForms.DataForm.BindableAttribute.#ctor(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.XForms.DataForm.BindableAttribute.#ctor(System.Boolean,Syncfusion.XForms.DataForm.BindingDirection)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.XForms.DataForm.BindableAttribute.#ctor(Syncfusion.XForms.DataForm.BindableSupport)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.XForms.DataForm.BindableAttribute.#ctor(Syncfusion.XForms.DataForm.BindableSupport,Syncfusion.XForms.DataForm.BindingDirection)" -->
        <member name="P:Syncfusion.XForms.DataForm.BindableAttribute.Bindable">
            <summary>
            Gets a value indicating
            whether a property is appropriate to bind data to.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.BindableAttribute.Direction">
            <summary>
            Gets a value indicating
            the direction(s) this property be bound to data.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.BindableAttribute.GetHashCode">
            <summary>
               <para>[To be supplied.]</para>
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.BindingDirection">
            <summary>
            <para>Specifies whether the template can be bound one-way or two-way.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.BindingDirection.OneWay">
            <summary>
            <para>The template can only accept property values.  Used with a generic ITemplate.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.BindingDirection.TwoWay">
            <summary>
            <para>The template can accept and expose property values.  Used with an IBindableTemplate.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.BindableSupport">
            <summary>
               <para>Specifies which values to say if property or event value can be bound to a data
                     element or another property or event's value.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.BindableSupport.No">
            <summary>
               <para>
                  The property or event is bindable.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.BindableSupport.Yes">
            <summary>
               <para>
                  The property or event is not bindable.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.BindableSupport.Default">
            <summary>
               <para>
                  The property or event is the default.
               </para>
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DisplayFormatAttribute">
            <summary>
            Allows overriding various display-related options for a given field. The options have the same meaning as in BoundField.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayFormatAttribute.DataFormatString">
            <summary>
            Gets or sets the format string
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayFormatAttribute.NullDisplayText">
            <summary>
            Gets or sets the string to display when the value is null
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayFormatAttribute.ConvertEmptyStringToNull">
            <summary>
            Gets or sets a value indicating whether empty strings should be set to null
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayFormatAttribute.ApplyFormatInEditMode">
            <summary>
            Gets or sets a value indicating whether the format string should be used in edit mode
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayFormatAttribute.HtmlEncode">
            <summary>
            Gets or sets a value indicating whether the field should be html encoded
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayFormatAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.EditableAttribute">
            <summary>
            Indicates whether the consumer of a field or property, such as a client application,
            should allow editing of the value.
            </summary>
            <remarks>
            This attribute neither enforces nor guarantees editability; the underlying data
            store might allow changing the data regardless of this attribute.  The presence
            of this attribute signals intent to the consumer of the attribute whethere or not
            the end user should be allowed to change the value via the client application.
            </remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.EditableAttribute.AllowEdit">
            <summary>
            Indicates whether or not the field/property allows editing of the
            value.
            </summary>
            <value>
            When <c>true</c>, the field/property is editable.
            <para>
            When <c>false</c>, the field/property is not editable.
            </para>
            </value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.EditableAttribute.AllowInitialValue">
            <summary>
            Indicates whether or not the field/property allows an initial value
            to be specified.
            </summary>
            <remarks>
            The value of this property defaults to match the <see cref="P:Syncfusion.XForms.DataForm.EditableAttribute.AllowEdit"/>
            property value specified in the constructor.
            </remarks>
            <value>
            When <c>true</c>, the field/property can have its value set for
            newly constructed instances, such as during an insert operation.
            <para>
            When <c>false</c>, the field/property cannot have its
            value provided for newly constructed instances, such as during
            an insert operation.  This will often indicate that the value
            is auto-generated by the persistence store.
            </para>
            </value>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.EditableAttribute.#ctor(System.Boolean)">
            <summary>
            Indicate whether or not a field/property is editable.
            </summary>
            <param name="allowEdit">
            Indicates whether the field/property is editable.  The value provided
            will apply to both <see cref="P:Syncfusion.XForms.DataForm.EditableAttribute.AllowEdit"/> and
            <see cref="P:Syncfusion.XForms.DataForm.EditableAttribute.AllowInitialValue"/> unless the <see cref="P:Syncfusion.XForms.DataForm.EditableAttribute.AllowInitialValue"/>
            property is explicitly specified.
            </param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ReadOnlyAttribute">
            <summary>
               <para>Specifies whether the property this attribute is bound to
                  is read-only or read/write.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.ReadOnlyAttribute.Yes">
            <summary>
               <para>
                  Specifies that the property this attribute is bound to is read-only and
                  cannot be modified in the server explorer. This <see langword='static '/>field is
                  read-only.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.ReadOnlyAttribute.No">
            <summary>
               <para>
                  Specifies that the property this attribute is bound to is read/write and can
                  be modified at design time. This <see langword='static '/>field is read-only.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.ReadOnlyAttribute.Default">
            <summary>
               <para>
                  Specifies the default value for the <see cref='!:System.ComponentModel.ReadOnlyAttribute'/> , which is <see cref='!:System.ComponentModel.ReadOnlyAttribute.No'/>, that is,
                  the property this attribute is bound to is read/write. This <see langword='static'/> field is read-only.
               </para>
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
               <para>
                  Initializes a new instance of the <see cref='!:System.ComponentModel.ReadOnlyAttribute'/> class.
               </para>
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ReadOnlyAttribute.IsReadOnly">
            <summary>
               <para>
                  Gets a value indicating whether the property this attribute is bound to is
                  read-only.
               </para>
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ReadOnlyAttribute.Equals(System.Object)">
            <internalonly/>
            <summary>
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ReadOnlyAttribute.GetHashCode">
            <summary>
               <para>
                  Returns the hashcode for this object.
               </para>
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DateRangeAttribute">
            <summary>
            Specifies the date range constraints for the value of a data field. 
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DateRangeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.DateRangeAttribute"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DateRangeAttribute.MaxDay">
            <summary>
            Gets or sets the maximum day of a date.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DateRangeAttribute.MaxMonth">
            <summary>
            Gets or sets the maximum month of a date.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DateRangeAttribute.MaxYear">
            <summary>
            Gets or sets the maximum year of a date.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DateRangeAttribute.MinDay">
            <summary>
            Gets or sets the minimum day of a date.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DateRangeAttribute.MinMonth">
            <summary>
            Gets or sets the minimum month of a date.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DateRangeAttribute.MinYear">
            <summary>
            Gets or sets the minimum year of a date.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DateRangeAttribute.IsValid(System.Object)">
            <summary>
            Checks that the value of the data field is in the specified range.
            </summary>
            <param name="value">
            The data field value to validate.
            </param>
            <returns>
            true if the specified value is in the range; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.MaxLengthAttribute">
            <summary>
            Specifies the maximum length of array/string data allowed in a property.
            </summary>  
        </member>
        <member name="P:Syncfusion.XForms.DataForm.MaxLengthAttribute.Length">
            <summary>
            Gets the maximum allowable length of the array/string data.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.MaxLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.MaxLengthAttribute"/> class.
            </summary>
            <param name="length">
            The maximum allowable length of array/string data.
            Value must be greater than zero.
            </param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.MaxLengthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.MaxLengthAttribute"/> class.
            The maximum allowable length supported by the database will be used.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.MaxLengthAttribute.IsValid(System.Object)">
            <summary>
            Determines whether a specified object is valid. (Overrides <see cref = "M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)" />)
            </summary>
            <remarks>
            This method returns <c>true</c> if the <paramref name = "value" /> is null.  
            It is assumed the <see cref = "T:Syncfusion.XForms.DataForm.RequiredAttribute" /> is used if the value may not be null.
            </remarks>
            <param name = "value">The object to validate.</param>
            <returns><c>true</c> if the value is null or less than or equal to the specified maximum length, otherwise <c>false</c></returns>
            <exception cref = "T:System.InvalidOperationException">Length is zero or less than negative one.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.MaxLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to a specified error message. (Overrides <see cref = "M:Syncfusion.XForms.DataForm.ValidationAttribute.FormatErrorMessage(System.String)" />)
            </summary>
            <param name = "name">The name to include in the formatted string.</param>
            <returns>A localized string to describe the maximum acceptable length.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.MaxLengthAttribute.EnsureLegalLengths">
            <summary>
            Checks that Length has a legal value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Length is zero or less than negative one.</exception>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.MinLengthAttribute">
            <summary>
            Specifies the minimum length of array/string data allowed in a property.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.MinLengthAttribute.Length">
            <summary>
            Gets the minimum allowable length of the array/string data.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.MinLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.MinLengthAttribute"/> class.
            </summary>
            <param name="length">
            The minimum allowable length of array/string data.
            Value must be greater than or equal to zero.
            </param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.MinLengthAttribute.IsValid(System.Object)">
            <summary>
            Determines whether a specified object is valid. (Overrides <see cref = "M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)" />)
            </summary>
            <remarks>
            This method returns <c>true</c> if the <paramref name = "value" /> is null.  
            It is assumed the <see cref = "T:Syncfusion.XForms.DataForm.RequiredAttribute" /> is used if the value may not be null.
            </remarks>
            <param name = "value">The object to validate.</param>
            <returns><c>true</c> if the value is null or greater than or equal to the specified minimum length, otherwise <c>false</c></returns>
            <exception cref = "T:System.InvalidOperationException">Length is less than zero.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.MinLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to a specified error message. (Overrides <see cref = "M:Syncfusion.XForms.DataForm.ValidationAttribute.FormatErrorMessage(System.String)" />)
            </summary>
            <param name = "name">The name to include in the formatted string.</param>
            <returns>A localized string to describe the minimum acceptable length.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.MinLengthAttribute.EnsureLegalLengths">
            <summary>
            Checks that Length has a legal value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Length is less than zero.</exception>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.RangeAttribute">
            <summary>
            Used for specifying a range constraint
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.RangeAttribute.Minimum">
            <summary>
            Gets the minimum value for the range
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.RangeAttribute.Maximum">
            <summary>
            Gets the maximum value for the range
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.RangeAttribute.OperandType">
            <summary>
            Gets the type of the <see cref="P:Syncfusion.XForms.DataForm.RangeAttribute.Minimum"/> and <see cref="P:Syncfusion.XForms.DataForm.RangeAttribute.Maximum"/> values (e.g. Int32, Double, or some custom type)
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that takes integer minimum and maximum values
            </summary>
            <param name="minimum">The minimum value, inclusive</param>
            <param name="maximum">The maximum value, inclusive</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Constructor that takes double minimum and maximum values
            </summary>
            <param name="minimum">The minimum value, inclusive</param>
            <param name="maximum">The maximum value, inclusive</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.RangeAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Allows for specifying range for arbitrary types. The minimum and maximum strings will be converted to the target type.
            </summary>
            <param name="type">The type of the range parameters. Must implement IComparable.</param>
            <param name="minimum">The minimum allowable value.</param>
            <param name="maximum">The maximum allowable value.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.RangeAttribute.IsValid(System.Object)">
            <summary>
            Returns true if the value falls between min and max, inclusive.
            </summary>
            <param name="value">The value to test for validity.</param>
            <returns><c>true</c> means the <paramref name="value"/> is valid</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.RangeAttribute.FormatErrorMessage(System.String)">
            <summary>
            Override of <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.FormatErrorMessage(System.String)"/>
            </summary>
            <remarks>This override exists to provide a formatted message describing the minimum and maximum values</remarks>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>A localized string describing the minimum and maximum values</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.RangeAttribute.SetupConversion">
            <summary>
            Validates the properties of this attribute and sets up the conversion function.
            This method throws exceptions if the attribute is not configured properly.
            If it has once determined it is properly configured, it is a NOP.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.RequiredAttribute">
            <summary>
            Validation attribute to indicate that a property field or parameter is required.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.RequiredAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>This constructor selects a reasonable default error message for <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.FormatErrorMessage(System.String)"/></remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.RequiredAttribute.AllowEmptyStrings">
            <summary>
            Gets or sets a flag indicating whether the attribute should allow empty strings.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.RequiredAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)"/>
            </summary>
            <param name="value">The value to test</param>
            <returns><c>false</c> if the <paramref name="value"/> is null or an empty string. If <see cref="P:Syncfusion.XForms.DataForm.RequiredAttribute.AllowEmptyStrings"/>
            then <c>false</c> is returned only if <paramref name="vale"/> is null.</returns>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.StringLengthAttribute">
            <summary>
            Validation attribute to assert a string property, field or parameter does not exceed a maximum length
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.StringLengthAttribute.MaximumLength">
            <summary>
            Gets the maximum acceptable length of the string
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.StringLengthAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum acceptable length of the string
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.StringLengthAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.StringLengthAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)"/>
            </summary>
            <remarks>This method returns <c>true</c> if the <paramref name="value"/> is null.  
            It is assumed the <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> is used if the value may not be null.</remarks>
            <param name="value">The value to test.</param>
            <returns><c>true</c> if the value is null or less than or equal to the set maximum length</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.StringLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Override of <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.FormatErrorMessage(System.String)"/>
            </summary>
            <param name="name">The name to include in the formatted string</param>
            <returns>A localized string to describe the maximum acceptable length</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.StringLengthAttribute.EnsureLegalLengths">
            <summary>
            Checks that MinimumLength and MaximumLength have legal values.  Throws InvalidOperationException if not.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationAttribute">
            <summary>
            Base class for all validation attributes.
            <para>Override <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object,Syncfusion.XForms.DataForm.ValidationContext)"/> to implement validation logic.</para>
            </summary>
            <remarks>
            The properties <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceType"/> and <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceName"/> are used to provide
            a localized error message, but they cannot be set if <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessage"/> is also used to provide a non-localized
            error message.
            </remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.#ctor">
            <summary>
            Default constructor for any validation attribute.
            </summary>
            <remarks>This constructor chooses a very generic validation error message.
            Developers subclassing ValidationAttribute should use other constructors
            or supply a better message.
            </remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts a fixed validation error message.
            </summary>
            <param name="errorMessage">A non-localized error message to use in <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageString"/>.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.#ctor(System.Func{System.String})">
            <summary>
            Allows for providing a resource accessor function that will be used by the <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageString"/>
            property to retrieve the error message.  An example would be to have something like
            CustomAttribute() : base( () =&gt; MyResources.MyErrorMessage ) {}.
            </summary>
            <param name="errorMessageAccessor">The <see cref="T:System.Func`1"/> that will return an error message.</param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationAttribute.DefaultErrorMessage">
            <summary>
            Gets or sets and the default error message string.
            This message will be used if the user has not set <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessage"/>
            or the <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceType"/> and <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceName"/> pair.
            This property was added after the public contract for DataAnnotations was created.
            It was added to fix DevDiv issue 468241.
            It is internal to avoid changing the DataAnnotations contract.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageString">
            <summary>
            Gets the localized error message string, coming either from <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessage"/>, or from evaluating the 
            <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceType"/> and <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceName"/> pair.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationAttribute.CustomErrorMessageSet">
            <summary>
            A flag indicating whether a developer has customized the attribute's error message by setting any one of 
            ErrorMessage, ErrorMessageResourceName, ErrorMessageResourceType or DefaultErrorMessage.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.XForms.DataForm.ValidationAttribute.RequiresValidationContext" -->
        <member name="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessage">
            <summary>
            Gets or sets and explicit error message string.
            </summary>
            <value>
            This property is intended to be used for non-localizable error messages.  Use
            <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceType"/> and <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceName"/> for localizable error messages.
            </value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceName">
            <summary>
            Gets or sets the resource name (property name) to use as the key for lookups on the resource type.
            </summary>
            <value>
            Use this property to set the name of the property within <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceType"/>
            that will provide a localized error message.  Use <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessage"/> for non-localized error messages.
            </value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceType">
            <summary>
            Gets or sets the resource type to use for error message lookups.
            </summary>
            <value>
            Use this property only in conjunction with <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageResourceName"/>.  They are
            used together to retrieve localized error messages at runtime.
            <para>Use <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessage"/> instead of this pair if error messages are not localized.
            </para>
            </value>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.SetupResourceAccessor">
            <summary>
            Validates the configuration of this attribute and sets up the appropriate error string accessor.
            This method bypasses all verification once the ResourceAccessor has been set.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <remarks>The error message will be re-evaluated every time this function is called. 
            It applies the <paramref name="name"/> (for example, the name of a field) to the formated error message, resulting 
            in something like "The field 'name' has an incorrect value".
            <para>
            Derived classes can override this method to customize how errors are generated.
            </para>
            <para>
            The base class implementation will use <see cref="P:Syncfusion.XForms.DataForm.ValidationAttribute.ErrorMessageString"/> to obtain a localized
            error message from properties within the current attribute.  If those have not been set, a generic
            error message will be provided.
            </para>
            </remarks>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)">
            <summary>
            Gets the value indicating whether or not the specified <paramref name="value"/> is valid
            with respect to the current validation attribute.
            <para>
            Derived classes should not override this method as it is only available for backwards compatibility.
            Instead, implement <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object,Syncfusion.XForms.DataForm.ValidationContext)"/>.
            </para>
            </summary>
            <remarks>
            The preferred public entry point for clients requesting validation is the <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.GetValidationResult(System.Object,Syncfusion.XForms.DataForm.ValidationContext)"/> method.
            </remarks>
            <param name="value">The value to validate</param>
            <returns><c>true</c> if the <paramref name="value"/> is acceptable, <c>false</c> if it is not acceptable</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
            <exception cref="T:System.NotImplementedException"> is thrown when neither overload of IsValid has been implemented
            by a derived class.
            </exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object,Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Protected virtual method to override and implement validation logic.
            <para>
            Derived classes should override this method instead of <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)"/>, which is deprecated.
            </para>
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">A <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/> instance that provides
            context about the validation operation, such as the object and member being validated.</param>
            <returns>
            When validation is valid, <see cref="F:Syncfusion.XForms.DataForm.ValidationResult.Success"/>.
            <para>
            When validation is invalid, an instance of <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/>.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
            <exception cref="T:System.NotImplementedException"> is thrown when <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object,Syncfusion.XForms.DataForm.ValidationContext)" />
            has not been implemented by a derived class.
            </exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.GetValidationResult(System.Object,Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Tests whether the given <paramref name="value"/> is valid with respect to the current
            validation attribute without throwing a <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/>
            </summary>
            <remarks>
            If this method returns <see cref="F:Syncfusion.XForms.DataForm.ValidationResult.Success"/>, then validation was successful, otherwise
            an instance of <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/> will be returned with a guaranteed non-null
            <see cref="P:Syncfusion.XForms.DataForm.ValidationResult.ErrorMessage"/>.
            </remarks>
            <param name="value">The value to validate</param>
            <param name="validationContext">A <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/> instance that provides
            context about the validation operation, such as the object and member being validated.</param>
            <returns>
            When validation is valid, <see cref="F:Syncfusion.XForms.DataForm.ValidationResult.Success"/>.
            <para>
            When validation is invalid, an instance of <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/>.
            </para>
            </returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:System.NotImplementedException"> is thrown when <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object,Syncfusion.XForms.DataForm.ValidationContext)" />
            has not been implemented by a derived class.
            </exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.Validate(System.Object,System.String)">
            <summary>
            Validates the specified <paramref name="value"/> and throws <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/> if it is not.
            <para>
            The overloaded <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.Validate(System.Object,Syncfusion.XForms.DataForm.ValidationContext)"/> is the recommended entry point as it
            can provide additional context to the <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/> being validated.
            </para>
            </summary>
            <remarks>This base method invokes the <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)"/> method to determine whether or not the
            <paramref name="value"/> is acceptable.  If <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)"/> returns <c>false</c>, this base
            method will invoke the <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.FormatErrorMessage(System.String)"/> to obtain a localized message describing
            the problem, and it will throw a <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/>
            </remarks>
            <param name="value">The value to validate</param>
            <param name="name">The string to be included in the validation error message if <paramref name="value"/> is not valid</param>
            <exception cref="T:Syncfusion.XForms.DataForm.ValidationException"> is thrown if <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object)"/> returns <c>false</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttribute.Validate(System.Object,Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Validates the specified <paramref name="value"/> and throws <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/> if it is not.
            </summary>
            <remarks>This method invokes the <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object,Syncfusion.XForms.DataForm.ValidationContext)"/> method 
            to determine whether or not the <paramref name="value"/> is acceptable given the <paramref name="validationContext"/>.
            If that method doesn't return <see cref="F:Syncfusion.XForms.DataForm.ValidationResult.Success"/>, this base method will throw
            a <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/> containing the <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/> describing the problem.
            </remarks>
            <param name="value">The value to validate</param>
            <param name="validationContext">Additional context that may be used for validation.  It cannot be null.</param>
            <exception cref="T:Syncfusion.XForms.DataForm.ValidationException"> is thrown if <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object,Syncfusion.XForms.DataForm.ValidationContext)"/> 
            doesn't return <see cref="F:Syncfusion.XForms.DataForm.ValidationResult.Success"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
            <exception cref="T:System.NotImplementedException"> is thrown when <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.IsValid(System.Object,Syncfusion.XForms.DataForm.ValidationContext)" />
            has not been implemented by a derived class.
            </exception>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationException">
            <summary>
            Exception used for validation using <see cref="P:Syncfusion.XForms.DataForm.ValidationException.ValidationAttribute"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationException.ValidationAttribute">
            <summary>
            Gets the <see>ValidationAttribute</see> instance that triggered this exception.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationException.ValidationResult">
            <summary>
            Gets the <see cref="P:Syncfusion.XForms.DataForm.ValidationException.ValidationResult"/> instance that describes the validation error.
            </summary>
            <value>
            This property will never be null.
            </value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationException.Value">
            <summary>
            Gets the value that caused the validating attribute to trigger the exception
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationException.#ctor(Syncfusion.XForms.DataForm.ValidationResult,Syncfusion.XForms.DataForm.ValidationAttribute,System.Object)">
            <summary>
            Constructor that accepts a structured <see cref="P:Syncfusion.XForms.DataForm.ValidationException.ValidationResult"/> describing the problem.
            </summary>
            <param name="validationResult">The value describing the validation error</param>
            <param name="validatingAttribute">The attribute that triggered this exception</param>
            <param name="value">The value that caused the validating attribute to trigger the exception</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationException.#ctor(System.String,Syncfusion.XForms.DataForm.ValidationAttribute,System.Object)">
            <summary>
            Constructor that accepts an error message, the failing attribute, and the invalid value.
            </summary>
            <param name="errorMessage">The localized error message</param>
            <param name="validatingAttribute">The attribute that triggered this exception</param>
            <param name="value">The value that caused the validating attribute to trigger the exception</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationException.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>The long form of this constructor is preferred because it gives better error reporting.</remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationException.#ctor(System.String)">
            <summary>
            Constructor that accepts only a localized message
            </summary>
            <remarks>The long form of this constructor is preferred because it gives better error reporting.</remarks>
            <param name="message">The localized message</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that accepts a localized message and an inner exception
            </summary>
            <remarks>The long form of this constructor is preferred because it gives better error reporting</remarks>
            <param name="message">The localized error message</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationResult">
            <summary>
            Container class for the results of a validation request.
            <para>
            Use the static <see cref="F:Syncfusion.XForms.DataForm.ValidationResult.Success"/> to represent successful validation.
            </para>
            </summary>
            <seealso cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.GetValidationResult(System.Object,Syncfusion.XForms.DataForm.ValidationContext)"/>       
        </member>
        <member name="F:Syncfusion.XForms.DataForm.ValidationResult.Success">
            <summary>
            Gets a <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/> that indicates Success.
            </summary>
            <remarks>
            The <c>null</c> value is used to indicate success.  Consumers of <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/>s
            should compare the values to <see cref="F:Syncfusion.XForms.DataForm.ValidationResult.Success"/> rather than checking for null.
            </remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationResult.#ctor(System.String)">
            <summary>
            Constructor that accepts an error message.  This error message would override any error message
            provided on the <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>.
            </summary>
            <param name="errorMessage">The user-visible error message.  If null, <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.GetValidationResult(System.Object,Syncfusion.XForms.DataForm.ValidationContext)"/>
            will use <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.FormatErrorMessage(System.String)"/> for its error message.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor that accepts an error message as well as a list of member names involved in the validation.
            This error message would override any error message provided on the <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>.
            </summary>
            <param name="errorMessage">The user-visible error message.  If null, <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.GetValidationResult(System.Object,Syncfusion.XForms.DataForm.ValidationContext)"/> 
            will use <see cref="M:Syncfusion.XForms.DataForm.ValidationAttribute.FormatErrorMessage(System.String)"/> for its error message.</param>
            <param name="memberNames">The list of member names affected by this result.
            This list of member names is meant to be used by presentation layers to indicate which fields are in error.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationResult.#ctor(Syncfusion.XForms.DataForm.ValidationResult)">
            <summary>
            Constructor that creates a copy of an existing ValidationResult.
            </summary>
            <param name="validationResult">The validation result.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationResult"/> is null.</exception>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationResult.MemberNames">
            <summary>
            Gets the collection of member names affected by this result.  The collection may be empty but will never be null.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationResult.ErrorMessage">
            <summary>
            Gets the error message for this result.  It may be null.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationResult.ToString">
            <summary>
            Override the string representation of this instance, returning
            the <see cref="P:Syncfusion.XForms.DataForm.ValidationResult.ErrorMessage"/> if not <c>null</c>, otherwise
            the base <see cref="M:System.Object.ToString"/> result.
            </summary>
            <remarks>
            If the <see cref="P:Syncfusion.XForms.DataForm.ValidationResult.ErrorMessage"/> is empty, it will still qualify
            as being specified, and therefore returned from <see cref="M:Syncfusion.XForms.DataForm.ValidationResult.ToString"/>.
            </remarks>
            <returns>The <see cref="P:Syncfusion.XForms.DataForm.ValidationResult.ErrorMessage"/> property value if specified,
            otherwise, the base <see cref="M:System.Object.ToString"/> result.</returns>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationContext">
            <summary>
            Describes the context in which a validation is being performed.
            </summary>
            <remarks>
            This class contains information describing the instance on which
            validation is being performed.
            <para>
            It supports <see cref="T:System.IServiceProvider"/> so that custom validation
            code can acquire additional services to help it perform its validation.
            </para>
            <para>
            An <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.Items"/> property bag is available for additional contextual
            information about the validation.  Values stored in <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.Items"/>
            will be available to validation methods that use this <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationContext.#ctor(System.Object)">
            <summary>
            Construct a <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/> for a given object instance being validated.
            </summary>
            <param name="instance">The object instance being validated.  It cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is <c>null</c></exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationContext.#ctor(System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Construct a <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/> for a given object instance and an optional
            property bag of <paramref name="items"/>.
            </summary>
            <param name="instance">The object instance being validated.  It cannot be null.</param>
            <param name="items">Optional set of key/value pairs to make available to consumers via <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.Items"/>.
            If null, an empty dictionary will be created.  If not null, the set of key/value pairs will be copied into a
            new dictionary, preventing consumers from modifying the original dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is <c>null</c></exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationContext.#ctor(System.Object,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Construct a <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/> for a given object instance, an optional <paramref name="serviceProvider"/>, and an optional
            property bag of <paramref name="items"/>.
            </summary>
            <param name="instance">The object instance being validated.  It cannot be null.</param>
            <param name="serviceProvider">
            Optional <see cref="T:System.IServiceProvider"/> to use when <see cref="M:Syncfusion.XForms.DataForm.ValidationContext.GetService(System.Type)"/> is called.
            <para>
            If the <paramref name="serviceProvider"/> specified implements <see cref="!:Design.IServiceContainer"/>,
            then it will be used as the <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ServiceContainer"/> but its services can still be retrieved
            through <see cref="M:Syncfusion.XForms.DataForm.ValidationContext.GetService(System.Type)"/> as well.
            </para>
            </param>
            <param name="items">Optional set of key/value pairs to make available to consumers via <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.Items"/>.
            If null, an empty dictionary will be created.  If not null, the set of key/value pairs will be copied into a
            new dictionary, preventing consumers from modifying the original dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is <c>null</c></exception>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationContext.ObjectInstance">
            <summary>
            Gets the object instance being validated.  While it will not be null, the state of the instance is indeterminate
            as it might only be partially initialized during validation.
            <para>Consume this instance with caution!</para>
            </summary>
            <remarks>
            During validation, especially property-level validation, the object instance might be in an indeterminate state.
            For example, the property being validated, as well as other properties on the instance might not have been
            updated to their new values.
            </remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationContext.ObjectType">
            <summary>
            Gets the type of the object being validated.  It will not be null.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationContext.DisplayName">
            <summary>
            Gets or sets the user-visible name of the type or property being validated.
            </summary>
            <value>If this name was not explicitly set, this property will consult an associated <see cref="T:Syncfusion.XForms.DataForm.DisplayAttribute"/>
            to see if can use that instead.  Lacking that, it returns <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.MemberName"/>.  The <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ObjectInstance"/>
            type name will be used if MemberName has not been set.
            </value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationContext.MemberName">
            <summary>
            Gets or sets the name of the type or property being validated.
            </summary>
            <value>This name reflects the API name of the member being validated, not a localized name.  It should be set
            only for property or parameter contexts.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationContext.Items">
            <summary>
            Gets the dictionary of key/value pairs associated with this context.
            </summary>
            <value>This property will never be null, but the dictionary may be empty.  Changes made
            to items in this dictionary will never affect the original dictionary specified in the constructor.</value>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationContext.GetDisplayName">
            <summary>
            Looks up the display name using the DisplayAttribute attached to the respective type or property.
            </summary>
            <returns>A display-friendly name of the member represented by the <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.MemberName"/>.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationContext.InitializeServiceProvider(System.Func{System.Type,System.Object})">
            <summary>
            Initializes the <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/> with a service provider that can return
            service instances by <see cref="T:System.Type"/> when <see cref="M:Syncfusion.XForms.DataForm.ValidationContext.GetService(System.Type)"/> is called.
            </summary>
            <param name="serviceProvider">
            A <see cref="T:System.Func`2"/> that can return service instances given the
            desired <see cref="T:System.Type"/> when <see cref="M:Syncfusion.XForms.DataForm.ValidationContext.GetService(System.Type)"/> is called.
            If it is <c>null</c>, <see cref="M:Syncfusion.XForms.DataForm.ValidationContext.GetService(System.Type)"/> will always return <c>null</c>.
            </param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationContext.GetService(System.Type)">
            <summary>
            See <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            When the <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ServiceContainer"/> is in use, it will be used
            first to retrieve the requested service.  If the <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ServiceContainer"/>
            is not being used or it cannot resolve the service, then the
            <see cref="T:System.IServiceProvider"/> provided to this <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/>
            will be queried for the service type.
            </summary>
            <param name="serviceType">The type of the service needed.</param>
            <returns>An instance of that service or null if it is not available.</returns>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationContext.ServiceContainer">
            <summary>
            A <see cref="!:Design.IServiceContainer"/> that can be used for adding,
            removing, and getting services during validation.  <see cref="M:Syncfusion.XForms.DataForm.ValidationContext.GetService(System.Type)"/>
            will query into this container as well as the <see cref="T:System.IServiceProvider"/>
            specified in the constructor.
            </summary>
            <remarks>
            If the <see cref="T:System.IServiceProvider"/> specified to the constructor implements
            <see cref="!:Design.IServiceContainer"/>, then it will be used as the
            <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ServiceContainer"/>, otherwise an empty container will be initialized.
            </remarks>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationContext.ValidationContextServiceContainer">
            <summary>
            Private implementation of <see cref="!:Design.IServiceContainer"/> to act
            as a default service container on <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationContext.ValidationContextServiceContainer.#ctor">
            <summary>
            Constructs a new service container that does not have a parent container
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationContext.ValidationContextServiceContainer.#ctor(Syncfusion.XForms.DataForm.IServiceContainer)">
            <summary>
            Contstructs a new service container that has a parent container, making this container
            a wrapper around the parent container.  Calls to <c>AddService</c> and <c>RemoveService</c>
            will promote to the parent container by default, unless <paramref name="promote"/> is
            specified as <c>false</c> on those calls.
            </summary>
            <param name="parentContainer">The parent container to wrap into this container.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationAttributeStore">
            <summary>
            Cache of <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s
            </summary>
            <remarks>
            This internal class serves as a cache of validation attributes and [Display] attributes.
            It exists both to help performance as well as to abstract away the differences between
            Reflection and TypeDescriptor.
            </remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidationAttributeStore.Instance">
            <summary>
            Gets the singleton <see cref="T:Syncfusion.XForms.DataForm.ValidationAttributeStore"/>
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttributeStore.GetTypeValidationAttributes(Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Retrieves the type level validation attributes for the given type.
            </summary>
            <param name="validationContext">The context that describes the type.  It cannot be null.</param>
            <returns>The collection of validation attributes.  It could be empty.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttributeStore.GetTypeDisplayAttribute(Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Retrieves the <see cref="T:Syncfusion.XForms.DataForm.DisplayAttribute"/> associated with the given type.  It may be null.
            </summary>
            <param name="validationContext">The context that describes the type.  It cannot be null.</param>
            <returns>The display attribute instance, if present.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttributeStore.GetPropertyValidationAttributes(Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Retrieves the set of validation attributes for the property
            </summary>
            <param name="validationContext">The context that describes the property.  It cannot be null.</param>
            <returns>The collection of validation attributes.  It could be empty.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttributeStore.GetPropertyDisplayAttribute(Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Retrieves the <see cref="T:Syncfusion.XForms.DataForm.DisplayAttribute"/> associated with the given property
            </summary>
            <param name="validationContext">The context that describes the property.  It cannot be null.</param>
            <returns>The display attribute instance, if present.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttributeStore.GetPropertyType(Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Retrieves the Type of the given property.
            </summary>
            <param name="validationContext">The context that describes the property.  It cannot be null.</param>
            <returns>The type of the specified property</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttributeStore.IsPropertyContext(Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Determines whether or not a given <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/>'s
            <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.MemberName"/> references a property on
            the <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ObjectType"/>.
            </summary>
            <param name="validationContext">The <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/> to check.</param>
            <returns><c>true</c> when the <paramref name="validationContext"/> represents a property, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttributeStore.GetTypeStoreItem(Syncfusion.XForms.DataForm.ValidationContext,System.Type)">
            <summary>
            Retrieves or creates the store item for the given type
            </summary>
            <param name="type">The type whose store item is needed.  It cannot be null</param>
            <returns>The type store item.  It will not be null.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttributeStore.EnsureValidationContext(Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Throws an ArgumentException of the validation context is null
            </summary>
            <param name="validationContext">The context to check</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationAttributeStore.StoreItem">
            <summary>
            Private abstract class for all store items
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationAttributeStore.TypeStoreItem">
            <summary>
            Private class to store data associated with a type
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.ValidationAttributeStore.TypeStoreItem.GetExplicitAttributes(System.Reflection.PropertyInfo)">
            <summary>
            Method to extract only the explicitly specified attributes from a <see cref="!:PropertyDescriptor"/>
            </summary>
            <remarks>
            Normal TypeDescriptor semantics are to inherit the attributes of a property's type.  This method
            exists to suppress those inherited attributes.
            </remarks>
            <param name="propertyDescriptor">The property descriptor whose attributes are needed.</param>
            <returns>A new <see cref="!:AttributeCollection"/> stripped of any attributes from the property's type.</returns>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationAttributeStore.PropertyStoreItem">
            <summary>
            Private class to store data associated with a property
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ServiceCreatorCallback">
            <devdoc>
                Declares a callback function to create an instance of a service on demand.
            </devdoc>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.IServiceContainer">
            <devdoc>
                This interface provides a container for services.  A service container
                is, by definition, a service provider.  In addition to providing services
                it also provides a mechanism for adding and removing services.
            </devdoc>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IServiceContainer.AddService(System.Type,System.Object)">
            <devdoc>
                Adds the given service to the service container.
            </devdoc>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <devdoc>
                Adds the given service to the service container.
            </devdoc>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IServiceContainer.AddService(System.Type,Syncfusion.XForms.DataForm.ServiceCreatorCallback)">
            <devdoc>
                Adds the given service to the service container.
            </devdoc>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IServiceContainer.AddService(System.Type,Syncfusion.XForms.DataForm.ServiceCreatorCallback,System.Boolean)">
            <devdoc>
                Adds the given service to the service container.
            </devdoc>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IServiceContainer.RemoveService(System.Type)">
            <devdoc>
                Removes the given service type from the service container.
            </devdoc>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IServiceContainer.RemoveService(System.Type,System.Boolean)">
            <devdoc>
                Removes the given service type from the service container.
            </devdoc>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Validator">
            <summary>
            Helper class to validate objects, properties and other values using their associated <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>
            custom attributes.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.TryValidateProperty(System.Object,Syncfusion.XForms.DataForm.ValidationContext,System.Collections.Generic.ICollection{Syncfusion.XForms.DataForm.ValidationResult})">
            <summary>
            Tests whether the given property value is valid.
            </summary>
            <remarks>
            This method will test each <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/> associated with the property
            identified by <paramref name="validationContext"/>.  If <paramref name="validationResults"/> is non-null,
            this method will add a <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/> to it for each validation failure.
            <para>
            If there is a <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> found on the property, it will be evaluated before all other
            validation attributes.  If the required validator fails then validation will abort, adding that single
            failure into the <paramref name="validationResults"/> when applicable, returning a value of <c>false</c>.
            </para>
            <para>
            If <paramref name="validationResults"/> is null and there isn't a <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> failure,
            then all validators will be evaluated.
            </para>
            </remarks>
            <param name="value">The value to test.</param>
            <param name="validationContext">Describes the property member to validate and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/>s for the failures.</param>
            <returns><c>true</c> if the value is valid, <c>false</c> if any validation errors are encountered.</returns>
            <exception cref="T:System.ArgumentException">
            When the <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.MemberName"/> of <paramref name="validationContext"/> is not a valid property.
            </exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.TryValidateObject(System.Object,Syncfusion.XForms.DataForm.ValidationContext,System.Collections.Generic.ICollection{Syncfusion.XForms.DataForm.ValidationResult})">
            <summary>
            Tests whether the given object instance is valid.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s attached to the object instance's type.  It also
            checks to ensure all properties marked with <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> are set.  It does not validate the
            property values of the object.
            <para>
            If <paramref name="validationResults"/> is null, then execution will abort upon the first validation
            failure.  If <paramref name="validationResults"/> is non-null, then all validation attributes will be
            evaluated.
            </para>
            </remarks>
            <param name="instance">The object instance to test.  It cannot be <c>null</c>.</param>
            <param name="validationContext">Describes the object to validate and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/>s for the failures.</param>
            <returns><c>true</c> if the object is valid, <c>false</c> if any validation errors are encountered.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ObjectInstance"/>on <paramref name="validationContext"/>.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.TryValidateObject(System.Object,Syncfusion.XForms.DataForm.ValidationContext,System.Collections.Generic.ICollection{Syncfusion.XForms.DataForm.ValidationResult},System.Boolean)">
            <summary>
            Tests whether the given object instance is valid.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s attached to the object instance's type.  It also
            checks to ensure all properties marked with <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> are set.  If <paramref name="validateAllProperties"/>
            is <c>true</c>, this method will also evaluate the <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s for all the immediate properties
            of this object.  This process is not recursive.
            <para>
            If <paramref name="validationResults"/> is null, then execution will abort upon the first validation
            failure.  If <paramref name="validationResults"/> is non-null, then all validation attributes will be
            evaluated.
            </para>
            <para>
            For any given property, if it has a <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> that fails validation, no other validators
            will be evaluated for that property.
            </para>
            </remarks>
            <param name="instance">The object instance to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object to validate and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/>s for the failures.</param>
            <param name="validateAllProperties">If <c>true</c>, also evaluates all properties of the object (this process is not
            recursive over properties of the properties).</param>
            <returns><c>true</c> if the object is valid, <c>false</c> if any validation errors are encountered.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ObjectInstance"/>on <paramref name="validationContext"/>.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.TryValidateValue(System.Object,Syncfusion.XForms.DataForm.ValidationContext,System.Collections.Generic.ICollection{Syncfusion.XForms.DataForm.ValidationResult},System.Collections.Generic.IEnumerable{Syncfusion.XForms.DataForm.ValidationAttribute})">
            <summary>
            Tests whether the given value is valid against a specified list of <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s.
            </summary>
            <remarks>
            This method will test each <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s specified .  If
            <paramref name="validationResults"/> is non-null, this method will add a <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/>
            to it for each validation failure.
            <para>
            If there is a <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> within the <paramref name="validationAttributes"/>, it will
            be evaluated before all other validation attributes.  If the required validator fails then validation will
            abort, adding that single failure into the <paramref name="validationResults"/> when applicable, returning a
            value of <c>false</c>.
            </para>
            <para>
            If <paramref name="validationResults"/> is null and there isn't a <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> failure,
            then all validators will be evaluated.
            </para>
            </remarks>
            <param name="value">The value to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object being validated and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:Syncfusion.XForms.DataForm.ValidationResult"/>s for the failures.</param>
            <param name="validationAttributes">The list of <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s to validate this <paramref name="value"/> against.</param>
            <returns><c>true</c> if the object is valid, <c>false</c> if any validation errors are encountered.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.ValidateProperty(System.Object,Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Throws a <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/> if the given property <paramref name="value"/> is not valid.
            </summary>
            <param name="value">The value to test.</param>
            <param name="validationContext">Describes the object being validated and provides services and context for the validators.  It cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:Syncfusion.XForms.DataForm.ValidationException">When <paramref name="value"/> is invalid for this property.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.ValidateObject(System.Object,Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Throws a <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/> if the given <paramref name="instance"/> is not valid.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s attached to the object's type.
            </remarks>
            <param name="instance">The object instance to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object being validated and provides services and context for the validators.  It cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ObjectInstance"/> on <paramref name="validationContext"/>.</exception>
            <exception cref="T:Syncfusion.XForms.DataForm.ValidationException">When <paramref name="instance"/> is found to be invalid.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.ValidateObject(System.Object,Syncfusion.XForms.DataForm.ValidationContext,System.Boolean)">
            <summary>
            Throws a <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/> if the given object instance is not valid.
            </summary>
            <remarks>
            This method evaluates all <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s attached to the object's type.
            If <paramref name="validateAllProperties"/> is <c>true</c> it also validates all the object's properties.
            </remarks>
            <param name="instance">The object instance to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object being validated and provides services and context for the validators.  It cannot be <c>null</c>.</param>
            <param name="validateAllProperties">If <c>true</c>, also validates all the <paramref name="instance"/>'s properties.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ObjectInstance"/> on <paramref name="validationContext"/>.</exception>
            <exception cref="T:Syncfusion.XForms.DataForm.ValidationException">When <paramref name="instance"/> is found to be invalid.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.ValidateValue(System.Object,Syncfusion.XForms.DataForm.ValidationContext,System.Collections.Generic.IEnumerable{Syncfusion.XForms.DataForm.ValidationAttribute})">
            <summary>
            Throw a <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/> if the given value is not valid for the <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s.
            </summary>
            <remarks>
            This method evaluates the <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s supplied until a validation error occurs,
            at which time a <see cref="T:Syncfusion.XForms.DataForm.ValidationException"/> is thrown.
            <para>
            A <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> within the <paramref name="validationAttributes"/> will always be evaluated first.
            </para>
            </remarks>
            <param name="value">The value to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object being tested.</param>
            <param name="validationAttributes">The list of <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/>s to validate against this instance.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:Syncfusion.XForms.DataForm.ValidationException">When <paramref name="value"/> is found to be invalid.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.CreateValidationContext(System.Object,Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Creates a new <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/> to use to validate the type or a member of
            the given object instance.
            </summary>
            <param name="instance">The object instance to use for the context.</param>
            <param name="validationContext">An parent validation context that supplies an <see cref="T:System.IServiceProvider"/>
            and <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.Items"/>.</param>
            <returns>A new <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/> for the <paramref name="instance"/> provided.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.CanBeAssigned(System.Type,System.Object)">
            <summary>
            Determine whether the given value can legally be assigned into the specified type.
            </summary>
            <param name="destinationType">The destination <see cref="T:System.Type"/> for the value.</param>
            <param name="value">The value to test to see if it can be assigned as the Type indicated by <paramref name="destinationType"/>.</param>
            <returns><c>true</c> if the assignment is legal.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="destinationType"/> is null.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.EnsureValidPropertyType(System.String,System.Type,System.Object)">
            <summary>
            Determines whether the given value can legally be assigned to the given property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyType">The type of the property.</param>
            <param name="value">The value.  Null is permitted only if the property will accept it.</param>
            <exception cref="T:System.ArgumentException"> is thrown if <paramref name="value"/> is the wrong type for this property.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.GetObjectValidationErrors(System.Object,Syncfusion.XForms.DataForm.ValidationContext,System.Boolean,System.Boolean)">
            <summary>
            Internal iterator to enumerate all validation errors for the given object instance.
            </summary>
            <param name="instance">Object instance to test.</param>
            <param name="validationContext">Describes the object type.</param>
            <param name="validateAllProperties">if <c>true</c> also validates all properties.</param>
            <param name="breakOnFirstError">Whether to break on the first error or validate everything.</param>
            <returns>A collection of validation errors that result from validating the <paramref name="instance"/> with
            the given <paramref name="validationContext"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="instance"/> doesn't match the
            <see cref="P:Syncfusion.XForms.DataForm.ValidationContext.ObjectInstance"/> on <paramref name="validationContext"/>.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.GetObjectPropertyValidationErrors(System.Object,Syncfusion.XForms.DataForm.ValidationContext,System.Boolean,System.Boolean)">
            <summary>
            Internal iterator to enumerate all the validation errors for all properties of the given object instance.
            </summary>
            <param name="instance">Object instance to test.</param>
            <param name="validationContext">Describes the object type.</param>
            <param name="validateAllProperties">If <c>true</c>, evaluates all the properties, otherwise just checks that
            ones marked with <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> are not null.</param>
            <param name="breakOnFirstError">Whether to break on the first error or validate everything.</param>
            <returns>A list of <see cref="T:Syncfusion.XForms.DataForm.Validator.ValidationError"/> instances.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.GetPropertyValues(System.Object,Syncfusion.XForms.DataForm.ValidationContext)">
            <summary>
            Retrieves the property values for the given instance.
            </summary>
            <param name="instance">Instance from which to fetch the properties.</param>
            <param name="validationContext">Describes the entity being validated.</param>
            <returns>A set of key value pairs, where the key is a validation context for the property and the value is its current
            value.</returns>
            <remarks>Ignores indexed properties.</remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.GetValidationErrors(System.Object,Syncfusion.XForms.DataForm.ValidationContext,System.Collections.Generic.IEnumerable{Syncfusion.XForms.DataForm.ValidationAttribute},System.Boolean)">
            <summary>
            Internal iterator to enumerate all validation errors for an value.
            </summary>
            <remarks>
            If a <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> is found, it will be evaluated first, and if that fails,
            validation will abort, regardless of the <paramref name="breakOnFirstError"/> parameter value.
            </remarks>
            <param name="value">The value to pass to the validation attributes.</param>
            <param name="validationContext">Describes the type/member being evaluated.</param>
            <param name="attributes">The validation attributes to evaluate.</param>
            <param name="breakOnFirstError">Whether or not to break on the first validation failure.  A
            <see cref="T:Syncfusion.XForms.DataForm.RequiredAttribute"/> failure will always abort with that sole failure.</param>
            <returns>The collection of validation errors.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Validator.TryValidate(System.Object,Syncfusion.XForms.DataForm.ValidationContext,Syncfusion.XForms.DataForm.ValidationAttribute,Syncfusion.XForms.DataForm.Validator.ValidationError@)">
            <summary>
            Tests whether a value is valid against a single <see cref="T:Syncfusion.XForms.DataForm.ValidationAttribute"/> using the <see cref="T:Syncfusion.XForms.DataForm.ValidationContext"/>.
            </summary>
            <param name="value">The value to be tested for validity.</param>
            <param name="validationContext">Describes the property member to validate.</param>
            <param name="attribute">The validation attribute to test.</param>
            <param name="validationError">The validation error that occurs during validation.  Will be <c>null</c> when the return value is <c>true</c>.</param>
            <returns><c>true</c> if the value is valid.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext"/> is null.</exception>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Validator.ValidationError">
            <summary>
            Private helper class to encapsulate a ValidationAttribute with the failed value and the user-visible
            target name against which it was validated.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormGroupItemView">
            <summary>
            Represent a layout that displays group of the <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            Group consists of expander and label. Expander denotes the expand collapse status of group in View.
            Label display group name in View.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormGroupItemView.DataFormGroupItem">
            <summary>
            Gets the <see cref="P:Syncfusion.XForms.DataForm.DataFormGroupItemView.DataFormGroupItem"/> associated with this layout.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormGroupItemView.IsExpanded">
            <summary>
            Gets a value that indicates whether the group is expanded. 
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormGroupItemView.GroupIcon">
            <summary>
            Gets or sets the group icon to show the expander in left.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormGroupItemView.Dispose(System.Boolean)">
            <summary>
            Dispose the specified isDisposing.
            </summary>
            <returns>The dispose.</returns>
            <param name="isDisposing">If set to <c>true</c> is disposing.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormItemView">
            <summary>
            Represents a layout that displays editor for data field of the <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            DataFormItemView consists of label shows the caption of data field,
            editor for editing the data field value, label for showing validation error message. 
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItemView.Editor">
            <summary>
            Gets the <see cref="T:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase"/> that creates, updates the editor and also handles editing of data field associated with <see cref="T:Syncfusion.XForms.DataForm.DataFormItemView"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItemView.DataFormItem">
            <summary>
            Gets <see cref="T:Syncfusion.XForms.DataForm.DataFormItem"/> associated with this layout.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemView.Dispose(System.Boolean)">
            <summary>
            Dispose the specified isDisposing.
            </summary>
            <returns>The dispose.</returns>
            <param name="isDisposing">If set to <c>true</c> is disposing.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormLayoutManager">
            <summary>
            Represent a class to creates <see cref="T:Syncfusion.XForms.DataForm.DataFormItemView"/>  and <see cref="T:Syncfusion.XForms.DataForm.DataFormGroupItemView"/> its sub views for <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.#ctor(Syncfusion.XForms.DataForm.SfDataForm)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.DataFormLayoutManager"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormLayoutManager.DataForm">
            <summary>
            Gets the instance of <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>        
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.MoveToNextFocusableEditor(Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Move focus to next focusable editor. IsReadOnly editor, Non-Focusable item will not get focus.
            </summary>
            <param name="dataFormItem">The current editing DataFormItem that leave from editing.</param>        
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.CreateDataFormItemView(System.Int32,System.Int32)">
            <summary>
            Creates the DataFormItemView and populates its sub view for specified index.
            </summary>
            <param name="rowIndex">The rowIndex to create the DataFormItemView</param>
            <param name="columnIndex">The columnIndex to create the DataFormItemView.</param>
            <returns>Returns the created DataFormItemView</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.CreateDataFormGroupItemView(System.Int32,System.Int32)">
            <summary>
            Creates DataFormGroupItemView and populates its sub view for specified index.
            </summary>
            <param name="rowIndex">The rowIndex to create the DataFormGroupItemView.</param>
            <param name="columnIndex">The columnIndex to create the DataFormGroupItemView.</param>
            <returns>Returns DataFormGroupItenView.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetGroupExpanderIcon(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Gets group expander icon for group.
            </summary>
            <param name="dataFormGroupItem">The DataFormGroupItem.</param>
            <returns>Returns ExpanderIcon</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetGroupCollapseIcon(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Gets group collapse icon for group.
            </summary>
            <param name="dataFormGroupItem">The DataFormGroupItem.</param>
            <returns>Returns CollapseIcon</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetLeftPaddingForLabel(Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Gets left start offset for label.
            </summary>
            <param name="dataFormItem"></param>
            <returns>Returns left padding value for label.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetLeftPaddingForGroupIcon(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Gets left start offset for group icon.
            </summary>
            <param name="dataFormGroupItem"></param>
            <returns>Returns Left padding for group icon.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetLeftPaddingForGroupHeader(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Gets left start offset for group header.
            </summary>
            <param name="dataFormGroupItem"></param>
            <returns>Returns left padding for group header.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetLeftPaddingForEditor(Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Gets left start offset for editor.
            </summary>
            <param name="dataFormItem"></param>
            <returns>Returns left padding for editor.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetLabelWidth(Syncfusion.XForms.DataForm.DataFormItem,System.Double)">
            <summary>
            Gets label width based on available width.
            </summary>
            <param name="dataFormItem"></param>
            <param name="availableWidth"></param>
            <returns>Returns label width.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetEditorWidth(Syncfusion.XForms.DataForm.DataFormItem,System.Double)">
            <summary>
            Gets editor width based on available width.
            </summary>
            <param name="dataFormItem"></param>
            <param name="availableWidth"></param>
            <returns>Returns editor width.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetLeftPaddingForValidationLabel(Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Gets start offset for validation label.
            </summary>
            <param name="dataFormItem"></param>
            <returns>Returns left padding for validation label.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GetValidationLabelWidth(Syncfusion.XForms.DataForm.DataFormItem,System.Double)">
            <summary>
            Gets validation label width based on available width.
            </summary>
            <param name="dataFormItem"></param>
            <param name="availableWidth"></param>
            <returns>Returns validation label width.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GenerateViewForLabel(Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Generates label to show the label text. 
            </summary>
            <param name="dataFormItem">The DataFormItem to get label properties.</param>
            <returns>
            Returns UILabel.
            </returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.OnEditorCreated(Syncfusion.XForms.DataForm.DataFormItem,Xamarin.Forms.View)">
            <summary>
            Raises after editor has created.
            </summary>
            <param name="dataFormItem">The DataFormItem.</param>
            <param name="editor">The Editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GenerateViewForGroupHeader(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Generates label to show the GroupHeader.
            </summary>
            <param name="dataFormGroupItem">The DataFormGroupItem to get the group information.</param>
            <returns>Returns UILabel.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.GenerateViewForGroupIcon(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Generates image to show the expander icon in DataFormGroupItemView.
            </summary>
            <returns>
            Returns UIImageView.
            </returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Syncfusion.XForms.DataForm.DataFormLayoutManager"/> object.
            </summary>
            <remarks>Call <see cref="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.Dispose"/> when you are finished using the
            <see cref="T:Syncfusion.XForms.DataForm.DataFormLayoutManager"/>. The <see cref="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.Dispose"/> method leaves
            the <see cref="T:Syncfusion.XForms.DataForm.DataFormLayoutManager"/> in an unusable state. After calling
            <see cref="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.Dispose"/>, you must release all references to the
            <see cref="T:Syncfusion.XForms.DataForm.DataFormLayoutManager"/> so the garbage collector can reclaim the
            memory that the <see cref="T:Syncfusion.XForms.DataForm.DataFormLayoutManager"/> was occupying.</remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormLayoutManager.Dispose(System.Boolean)">
            <summary>
            Dispose the specified isDisposing.
            </summary>
            <returns>The dispose.</returns>
            <param name="isDisposing">If set to <c>true</c> is disposing.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormItemBase">
            <summary>
            Represents the base class that encapsulates the layout, group and editor setting for a data fields appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItemBase.IsGroup">
            <summary>
            Gets a value indicating whether the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemBase"/> is group (<see cref="T:Syncfusion.XForms.DataForm.DataFormGroupItem"/>) or not.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItemBase.IsVisible">
            <summary>
            Gets or sets a value indicating whether to show the data field for editing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItemBase.ItemManager">
            <summary>
            Gets the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemManager"/> which creates DataFormItem's for for the date fileds appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItemBase.View">
            <summary>
            Gets a value that indicates the rendering item in view.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemBase.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemBase"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemBase.CanFocus">
            <summary>
            Returns the whether the editor loaded for data field allows focus when moving by keyboard Go action.
            </summary>
            <returns>Return true to set the focus to editor.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemBase.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemBase"/>.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.CommitMode">
            <summary>
            Defines the constants for <see cref="P:Syncfusion.XForms.DataForm.SfDataForm.CommitMode"/> that specifies when the value entered by user should be saved to the data object. 
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.CommitMode.LostFocus">
            <summary>
            Commits the value when the editor lost it's focus.
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.CommitMode.PropertyChanged">
            <summary>
            Commits the value immediately when the value is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.CommitMode.Explicit">
            <summary> 
            Commits the value manually by calling <see cref="M:Syncfusion.XForms.DataForm.SfDataForm.Commit"/> or <see cref="M:Syncfusion.XForms.DataForm.SfDataForm.Commit(System.String)"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidationMode">
            <summary>
            Defines the constants for <see cref="P:Syncfusion.XForms.DataForm.SfDataForm.ValidationMode"/> that specifies when the user input should be validated for data object.
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.ValidationMode.LostFocus">
            <summary>
            Validates the value when editor focus changed to another editor. 
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.ValidationMode.PropertyChanged">
            <summary>
            Validates the value immediately after the property value is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.ValidationMode.Explicit">
            <summary> 
            Validation will be performed explicitly by calling <see cref="M:Syncfusion.XForms.DataForm.SfDataForm.Validate"/> or <see cref="M:Syncfusion.XForms.DataForm.SfDataForm.Validate(System.String)"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.LabelPosition">
            <summary>
            Defines the constants for <see cref="P:Syncfusion.XForms.DataForm.SfDataForm.LabelPosition"/> that specifies whether to layout the label at left or top of editor.
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.LabelPosition.Left">
            <summary>
            Layout the label at the left of editor.
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.LabelPosition.Top">
            <summary>
            Layout the label at the top of editor.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.SourceProvider">
            <summary>
            Represents the class to provide override method to get the source for picker type properties.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SourceProvider.GetSource(System.String)">
            <summary>
            Get the source list for picket editor based on data field name.
            </summary>
            <param name="sourceName">The data field name to get the list.</param>
            <returns>
            Returns the source list based on specified data field name.
            </returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.RegsiterEditor(System.Object,System.String,Syncfusion.XForms.DataForm.Editors.DataFormEditorBase)">
            <summary>
            Regsiters the editor.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="editorName">Editor name.</param>
            <param name="dataFormEditor">Data form editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.RegisterPropertyEditor(System.Object,System.String,System.String)">
            <summary>
            Registers the property editor.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="propertyName">Property name.</param>
            <param name="editor">Editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.RegisterTypeEditor(System.Object,System.Type,System.String)">
            <summary>
            Registers the type editor.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="type">Type.</param>
            <param name="editor">Editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.Commit(System.Object)">
            <summary>
            Commit the specified nativeObject.
            </summary>
            <returns>The commit.</returns>
            <param name="nativeObject">Native object.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.Commit(System.Object,System.String)">
            <summary>
            Commit the specified nativeObject and propertyName.
            </summary>
            <returns>The commit.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.Validate(System.Object)">
            <summary>
            Validate the specified nativeObject.
            </summary>
            <returns>The validate.</returns>
            <param name="nativeObject">Native object.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.Validate(System.Object,System.String)">
            <summary>
            Validate the specified nativeObject and propertyName.
            </summary>
            <returns>The validate.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.UpdateEditor(System.Object,System.String)">
            <summary>
            Updates the editor.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.ExpandGroup(System.Object,System.String)">
            <summary>
            Expands the group.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="groupName">Group name.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.CollapseGroup(System.Object,System.String)">
            <summary>
            Collapses the group.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="groupName">Group name.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.RefreshLayout(System.Object,System.Boolean)">
            <summary>
            Refreshs the layout.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="generateAllItems">If set to <c>true</c> generate all items.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.MoveToNextFocusableEditor(System.Object,Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Moves to next focusable editor.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormItem">Data form item.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetLeftPaddingForEditor(System.Object,Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Gets the left padding for editor.
            </summary>
            <returns>The left padding for editor.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormItem">Data form item.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetLeftPaddingForGroupHeader(System.Object,Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Gets the left padding for group header.
            </summary>
            <returns>The left padding for group header.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormGroupItem">Data form group item.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetLeftPaddingForGroupIcon(System.Object,Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Gets the left padding for group icon.
            </summary>
            <returns>The left padding for group icon.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormGroupItem">Data form group item.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetLeftPaddingForLabel(System.Object,Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Gets the left padding for label.
            </summary>
            <returns>The left padding for label.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormItem">Data form item.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetLabelWidth(System.Object,Syncfusion.XForms.DataForm.DataFormItem,System.Double)">
            <summary>
            Gets the width of the label.
            </summary>
            <returns>The label width.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormItem">Data form item.</param>
            <param name="availableWidth">Available width.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetEditorWidth(System.Object,Syncfusion.XForms.DataForm.DataFormItem,System.Double)">
            <summary>
            Gets the width of the editor.
            </summary>
            <returns>The editor width.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormItem">Data form item.</param>
            <param name="availableWidth">Available width.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetValidationLabelWidth(System.Object,Syncfusion.XForms.DataForm.DataFormItem,System.Double)">
            <summary>
            Gets the width of the validation label.
            </summary>
            <returns>The editor width.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormItem">Data form item.</param>
            <param name="availableWidth">Available width.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetDataFormItem(System.Object,System.Int32)">
            <summary>
            Gets the data form item.
            </summary>
            <returns>The data form item.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="index">Index.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetDataFormItem(System.Object,System.Int32,System.Int32)">
            <summary>
            Gets the data form item.
            </summary>
            <returns>The data form item.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="rowIndex">Row index.</param>
            <param name="columnIndex">Column index.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetDataFormItem(System.Object,System.String)">
            <summary>
            Gets the data form item.
            </summary>
            <returns>The data form item.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.GetValue(System.Object,Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Gets the value.
            </summary>
            <returns>The value.</returns>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormItem">Data form item.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.SetValue(System.Object,Syncfusion.XForms.DataForm.DataFormItem,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="dataFormItem">Data form item.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.CreateNativeDataFormItemView(System.Object,System.Int32,System.Int32)">
            <summary>
            Creates native DataFormItemView.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="rowIndex">The RowIndex of DataFormItem.</param>
            <param name="columnIndex">The ColumnIndex of DataFormItem.</param>
            <returns>Returns DataFormItemView.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.CreateNativeDataFormGroupItemView(System.Object,System.Int32,System.Int32)">
            <summary>
            Creates native DataFormGroupItemView.
            </summary>
            <param name="nativeObject">Native object.</param>
            <param name="rowIndex">The RowIndex of DataFormGroupItem.</param>
            <param name="columnIndex">The ColumnIndex of DataFormGroupItem.</param>
            <returns>Returns DataFormGroupItemView.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.IDataFormDependencyService.Dispose(System.Object)">
            <summary>
            Disposes the instance of <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>
            </summary>
            <param name="nativeObject">The native oject.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase">
            <summary>
            Represent an class that creates editor for data field and handles commit and validation.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.#ctor(Syncfusion.XForms.DataForm.SfDataForm)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase"/>.
            </summary>
            <param name="dataForm"></param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.DataForm">
            <summary>
            Gets the instance of <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>        
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.CreateEditorView">
            <summary>
            Create and return it for DataFormItemView’s sub view.
            </summary>
            <returns>
            Returns corresponding EditorView.
            </returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.InitializeView(Syncfusion.XForms.DataForm.DataFormItem,Xamarin.Forms.View)">
            <summary>
            Initialize View with DataFormItemView.DataFormItem property info.
            </summary>
            <param name="dataFormItem">The dataFormItem is property info of Editor</param> 
            <param name="view">The UIview.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.Layout(Syncfusion.XForms.DataForm.DataFormItem,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="dataFormItem"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.Measure(Syncfusion.XForms.DataForm.DataFormItem,System.Int32,System.Int32)">
            <summary>
            Measures the editor.
            </summary>
            <param name="dataFormItem"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.UnWireEvents(Xamarin.Forms.View)">
            <summary>
            UnWires events for DataFormItemView's editor view.
            </summary>
            <param name="view">The view to wire the events.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.UpdateValue(Syncfusion.XForms.DataForm.DataFormItem,Xamarin.Forms.View)">
            <summary>
            Updates the value of the specific editor to the corresponding property.
            </summary>
            <param name="dataFormItem">the corresponding DataFormItem.</param>
            <param name="view">the editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.WireEvents(Xamarin.Forms.View)">
            <summary>
            Wires events for DataFormItemView's editor view.
            </summary>
            <param name="view">The view to wire the events.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.CommitValue(Xamarin.Forms.View)">
            <summary>
            Commits the value of the specific editor to corresponding property of data object.
            </summary>
            <param name="view">the editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.ValidateValue(Xamarin.Forms.View)">
            <summary>
            Validates the value of the editor.
            </summary>
            <param name="view">the editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.RequestFocus(Xamarin.Forms.View)">
            <summary>
            Requests focus for the view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditorBase.Dispose(System.Boolean)">
            <summary>
            Dispose the specified disposing.
            </summary>
            <returns>The dispose.</returns>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1">
            <summary>
            Represent a class to handle the UIView specific initialization, wiring and un wiring.
            </summary>
            <typeparam name="EditorView"></typeparam>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.CommitValue(Xamarin.Forms.View)">
            <summary>
            Commits the value of the specific editor to corresponding property in the business object.
            </summary>
            <param name="view">the editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnUpdateValue(Syncfusion.XForms.DataForm.DataFormItem,`0)">
            <summary>        
            Updates the value of the specific editor to corresponding property in the business object.
            </summary>
            <param name="view">the editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnUpdateSettings(Syncfusion.XForms.DataForm.DataFormItem,`0)">
            <summary>
            Updates the editor settings.
            </summary>
            <param name="dataFormItem"></param>
            <param name="view"></param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnRequestFocus(`0)">
            <summary>
            Requests focus for particular editor.
            </summary>
            <param name="view">The view to be fcoused.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnCreateEditorView">
            <summary>
            Create and return it for DataFormItemView’s sub view.
            </summary>
            <returns>
            Returns corresponding EditorView.
            </returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnLayout(`0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnInitializeView(Syncfusion.XForms.DataForm.DataFormItem,`0)">
            <summary>
            Initialize View with DataFormItemView.DataFormItem property info.
            </summary>
            <param name="dataFormItem">The dataFormItem is property info of Editor</param>   
            <param name="view">The UIview.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnWireEvents(`0)">
            <summary>
            Wires events for DataFormItemView's editor view.
            </summary>
            <param name="view">The view to wire the events.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnValidateValue(`0)">
            <summary>        
            Validates the value of the specific editor to corresponding property in the business object.
            </summary>
            <param name="view">the editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnCommitValue(`0)">
            <summary>        
            Commits the value of the specific editor to corresponding property in the business object.
            </summary>
            <param name="view">the editor.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DataFormEditor`1.OnUnWireEvents(`0)">
            <summary>
            UnWires events for DataFormItemView's editor view.
            </summary>
            <param name="view">The view to unwire the events</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormNumericEditor">
            <summary>
            Represents a class to handle the numeric type property editor with NumericTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormDateEditor">
            <summary>
            Represents a class to handle the DateTime type property editor with <see cref="T:Xamarin.Forms.DatePicker"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormPickerEditor">
            <summary>
            Represents a class to handle list of items with Picker.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormSwitchEditor">
            <summary>
            Represents a class to handle the bool type property editor with Switch.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormTimeEditor">
            <summary>
            Represents a class to handle list of items with Timepicker.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormNumericUpDownEditor">
            <summary>
            Represents a class to handle the numeric type property editor with SfNumericUpDown.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormCheckBoxEditor">
            <summary>
            Represents a class to handle the bool type property editor with CheckBox.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormTextEditor">
            <summary>
            Represents a class to handle the string type property editor with Entry.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormMultiLineTextEditor">
            <summary>
            Represents a class to handle multiline text editor with Editor.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.SegmentControl">
            <summary>
            Reprsent a class that work as wrapper for segment control.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.SegmentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.Editors.SegmentControl"/> class.
            </summary>
        </member>
        <member name="E:Syncfusion.XForms.DataForm.Editors.SegmentControl.ValueChanged">
            <summary>
            Occurs when value changed.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.Editors.SegmentControl.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.SegmentControl.RaiseValueChangedEvent(Syncfusion.XForms.DataForm.Editors.ValueChangedEventArgs)">
            <summary>
            Raises the value changed event.
            </summary>
            <param name="e">E.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.Segment">
            <summary>
            Represents a class for wrapper for Segement items.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.Segment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.Editors.Segment"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.Editors.Segment.Selected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.XForms.DataForm.Editors.Segment"/>
            is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.ValueChangedEventArgs">
            <summary>
            Value change event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.Editors.ValueChangedEventArgs.SelectedSegment">
            <summary>
            Gets the selected segment.
            </summary>
            <value>The selected segment.</value>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.ValueChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.Editors.ValueChangedEventArgs"/> class.
            </summary>
            <param name="selectedSegment">Selected segment.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.Orientation">
            <summary>
            Defines constant for Orientation.
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.Editors.Orientation.Horizontal">
            <summary>
            Arranges subviews horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.Editors.Orientation.Vertical">
            <summary>
            Arranges subvies vertically.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormSegmentedEditor">
            <summary>
            Represents a class to handle enum types with Segement control.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DropDownControl">
            <summary>
            Represents a wrapper for DropDown control.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DropDownControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.Editors.DropDownControl"/> class.
            </summary>
        </member>
        <member name="E:Syncfusion.XForms.DataForm.Editors.DropDownControl.SelectedIndexChanged">
            <summary>
            Occurs when selected index changed.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.Editors.DropDownControl.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.Editors.DropDownControl.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value>The items source.</value>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.DropDownControl.RaiseSelectedIndexChangedEvent(Syncfusion.XForms.DataForm.Editors.SelectedIndexChangedEventArgs)">
            <summary>
            Raises the selected index changed event.
            </summary>
            <param name="e">E.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.SelectedIndexChangedEventArgs">
            <summary>
            Selected index changed event arguments.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.Editors.SelectedIndexChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Syncfusion.XForms.DataForm.Editors.SelectedIndexChangedEventArgs"/> class.
            </summary>
            <param name="selectedIndex">Selected index.</param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.Editors.SelectedIndexChangedEventArgs.SelectedIndex">
            <summary>
            The index of the selected item.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.Editors.DataFormDropDownEditor">
            <summary>
            Represents a class to handle enum types with drop down control.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormGroupItem">
            <summary>
            Represents the class to encapsulates the group settings and <see cref="T:Syncfusion.XForms.DataForm.DataFormItem"/> settings for group of data field's appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormGroupItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.DataFormGroupItem"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormGroupItem.ColumnCount">
            <summary>
            Gets or sets the value denotes the number of editor to be arranged per row. Be default one editor for one property arranged with label. 
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormGroupItem.DataFormItems">
            <summary>
            Gets or sets the value that indicates the items that are grouped under the group.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormGroupItem.IsExpanded">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Syncfusion.XForms.DataForm.DataFormGroupItem"/> is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormGroupItem.AllowExpandCollapse">
            <summary>
            Gets or sets a value that indicates whether user can expand or collapse the group.
            </summary>
            <remarks>
            <b>True</b> if user can expand or collapse .Otherwise <b>False</b>.
            </remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormGroupItem.GroupName">
            <summary>
            Gets or sets the caption of group.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormGroupItem.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="!:SfDataForm.DataFormItem"/> class.
            </summary>
            <param name="isDisposing"> Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormItem">
            <summary>
            Represents the class that encapsulates the layout and editor setting for a data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            DataForm layouts caption labels, editors and validation error message based on the property settings of this class.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.DataFormItem"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.Editor">
            <summary>
            Gets or sets the editor names which denotes the renderer associated with editor.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.GroupName">
            <summary>
            Gets or sets the group name of data field that is used to group properties in View.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.ImageSource">
            <summary>
            Gets or sets the image to show in place of label.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.IsReadOnly">
            <summary>
            Gets or sets the value that indicates whether to allow user to edit or not.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.LabelText">
            <summary>
            Gets or sets the data field caption for the editor in View. 
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.Order">
            <summary>
            Gets or sets the order of the editor in a view. Based on this value data fields will be arrange on order by <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.PlaceHolderText">
            <summary>
            Gets or sets the water mark for the editor to provide hint for users.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.PropertyInfo">
            <summary>
            Gets or the meta data of property.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.ShowLabel">
            <summary>
            Gets or sets a value that indicates whether to show label or not.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItem.EditorView">
            <summary>
            Gets the editor loaded for data field.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormNumericItem">
            <summary>
            Represents the class that encapsulates the layout and numeric editor setting for a data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericItem.ParsingMode">
            <summary>
            Gets or sets a value that decides whether to parse the value as decimal or double.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericItem.PercentDisplayMode">
            <summary>
            Gets or sets a value which specifies how to display numeric value in percent mode.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormNumericItemBase">
            <summary>
            Represents the base class that encapsulates the layout and numeric editor setting for a data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>. 
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericItemBase.AllowNull">
            <summary>
            Gets or sets a value that indicates whether null value should be allowed for data field or not.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericItemBase.EnableGroupSeparator">
            <summary>
            Gets or sets a value that indicates whether display group separator or not.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericItemBase.CultureInfo">
            <summary>
            Gets or sets the culture info for formatting.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericItemBase.FormatString">
            <summary>
            Gets or sets the format string to format the value.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericItemBase.MaximumNumberDecimalDigits">
            <summary>
            Gets or sets the maximum number decimal digits should be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericItemBase.InputAccessoryView">
            <summary>
            Gets or sets the custom keyboard view to display when the editor becomes the first responder.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormDateItem">
            <summary>
            Represents the class that encapsulates the layout and date picker editor settings for a data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormDateItem.Format">
            <summary>
            Gets or sets the date format.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormDateItem.MaximumDate">
            <summary>
            Gets or sets the maximum allowable date.
            </summary> 
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormDateItem.MinimumDate">
            <summary>
            Gets or sets the minimum allowable date.
            </summary>        
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormTimeItem">
            <summary>
            Represents the class that encapsulates the layout and time picker editor setting for type data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>. 
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormTimeItem.Format">
            <summary>
            Gets or sets the time format used in time picker.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormPickerItem">
            <summary>
            Represents the class that encapsulates the layout and picker editor settigs for data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormPickerItem.DisplayMemberPath">
            <summary>
            Gets or sets a path to a value on the source object that will get displayed in picker.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormPickerItem.ItemsSource">
            <summary>
            Gets or sets the collection which will get displayed in drop-down of picker where user can select from available items.
            </summary>      
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormPickerItem.Title">
            <summary>
            Gets or sets the title of the picker.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormPickerItem.ValueMemberPath">
            <summary>
            Gets or sets a path to a value on the source object which will get saved to data field.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormDropDownItem">
            <summary>
            Represents the class that encapsulates the layout and Drop down editor (Spinner) settings for data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormDropDownItem.ItemsSource">
            <summary>
            Gets or sets the ItemsSource of the Spinner.
            </summary>      
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormNumericUpDownItem">
            <summary>
            Represents the class that encapsulates the layout and numeric updown editor setting for data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>. 
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericUpDownItem.AutoReverse">
            <summary>
            Gets or sets the value which indicates autoReverse should be enabled in numeric up down.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericUpDownItem.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>        
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericUpDownItem.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>        
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericUpDownItem.SpinButtonAlignment">
            <summary>
            Gets or sets the Spin Button Alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericUpDownItem.PercentDisplayMode">
            <summary>
            Gets or sets a value which specifies how to display numeric data in percent mode.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericUpDownItem.ParsingMode">
            <summary>
            Gets or sets a value that decides whether the user can parse decimal or double value.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormNumericUpDownItem.StepValue">
            <summary>
            Gets or sets the Step Value.
            </summary>    
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormTextItem">
            <summary>
            Represents the class that encapsulates the layout and text editor setting for a data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>. 
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormTextItem.KeyBoard">
            <summary>
            Gets or sets the type of keyboard to display for the text editor.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormItemManager">
            <summary>
            Represents a class that creates DataFormItems collection and item properties
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItemManager.DataFormItems">
            <summary>
            Gets or sets the data form items.
            </summary>
            <value>The data form items.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItemManager.NativeObject">
            <summary>
            Gets or sets the native object.
            </summary>
            <value>The native object.</value>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemManager.GetValue(Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Gets a value for property.
            </summary>
            <param name="dataFormItem">The DataFormItem to get a value.</param>
            <returns>
            Returns value.
            </returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemManager.SetValue(Syncfusion.XForms.DataForm.DataFormItem,System.Object)">
            <summary>
            Sets a value to property.
            </summary>
            <param name="dataFormItem">The DataFormItem to get a value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemManager.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemManager"/> object.
            </summary>
            <remarks>Call <see cref="M:Syncfusion.XForms.DataForm.DataFormItemManager.Dispose"/> when you are finished using the
            <see cref="T:Syncfusion.XForms.DataForm.DataFormItemManager"/>. The <see cref="M:Syncfusion.XForms.DataForm.DataFormItemManager.Dispose"/> method leaves
            the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemManager"/> in an unusable state. After calling
            <see cref="M:Syncfusion.XForms.DataForm.DataFormItemManager.Dispose"/>, you must release all references to the
            <see cref="T:Syncfusion.XForms.DataForm.DataFormItemManager"/> so the garbage collector can reclaim the
            memory that the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemManager"/> was occupying.</remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemManager.RegisterPropertyEditor(System.String,System.String)">
            <summary>
            Adds editor for property in editorPropertyRegistry.
            </summary>
            <param name="propertyName">The propertyName to have editor.</param>
            <param name="editor">The editor that loaded for property name.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemManager.RegisterTypeEditor(System.Type,System.String)">
            <summary>
            Adds editor for property in editorTypeRegistry.
            </summary>
            <param name="type">The type to have editor.</param>
            <param name="editor">The editor that loaded for type.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemManager.GetItemProperties">
            <summary>
            Returns the default System.ComponentModel.PropertyDescriptorCollection.
            </summary>
            <returns>A collection of property descriptor.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemManager.SetItemProperties(System.Object)">
            <summary>
            Sets ItemProperties from specified dataSource.
            </summary>
            <param name="sourceItem">The bound dataSource.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemManager.GenerateDataFormItems(Syncfusion.XForms.DataForm.PropertyInfoCollection,System.Collections.Generic.List{Syncfusion.XForms.DataForm.DataFormItemBase})">
            <summary>
             Generates DataFormItems from PropertyInfoCollection.
            </summary>
            <param name="itemProperties">the item properties.</param>
            <param name="dataFormItems">list of data form items.</param>
            <returns>list of generated data form items</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemManager.Dispose(System.Boolean)">
            <summary>
            Dispose the specified isDisposing.
            </summary>
            <returns>The dispose.</returns>
            <param name="isDisposing">If set to <c>true</c> is disposing.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormItemViewBase">
            <summary>
            Represents a base layout for displaying group,  label and editor of data field for <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>                                 .
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemViewBase.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemViewBase"/> object.
            </summary>
            <remarks>Call <see cref="M:Syncfusion.XForms.DataForm.DataFormItemViewBase.Dispose"/> when you are finished using the
            <see cref="T:Syncfusion.XForms.DataForm.DataFormItemViewBase"/>. The <see cref="M:Syncfusion.XForms.DataForm.DataFormItemViewBase.Dispose"/> method leaves
            the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemViewBase"/> in an unusable state. After calling
            <see cref="M:Syncfusion.XForms.DataForm.DataFormItemViewBase.Dispose"/>, you must release all references to the
            <see cref="T:Syncfusion.XForms.DataForm.DataFormItemViewBase"/> so the garbage collector can reclaim the
            memory that the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemViewBase"/> was occupying.</remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItemViewBase.Dispose(System.Boolean)">
            <summary>
            Dispose the specified isDisposing.
            </summary>
            <returns>The dispose.</returns>
            <param name="isDisposing">If set to <c>true</c> is disposing.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DisplayOptionsAttribute">
            <summary>
            Provides a attribute that lets you specify the the display settings for a data field in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DisplayOptionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.DisplayOptionsAttribute"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayOptionsAttribute.ColumnSpan">
            <summary>
            Gets or sets the value that indicates number columns the data field can span in view when <see cref="P:Syncfusion.XForms.DataForm.SfDataForm.ColumnCount"/> is set.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayOptionsAttribute.ImageName">
            <summary>
            Gets or sets the image to show in the place of label.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayOptionsAttribute.RowSpan">
            <summary>
            Gets or sets the row span value of data field in view during layout.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayOptionsAttribute.ShowLabel">
            <summary>
            Gets or sets a value that indicates whether to show label in view or not.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DisplayOptionsAttribute.ValidMessage">
            <summary>
            Gets or sets a string which will get displayed when user enters valid value for the data field as success message. 
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.AutoGeneratingDataFormItemEventArgs">
            <summary>
            Provides data for <see cref="E:Syncfusion.XForms.DataForm.SfDataForm.AutoGeneratingDataFormItem"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.AutoGeneratingDataFormItemEventArgs.#ctor(Syncfusion.XForms.DataForm.DataFormItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.AutoGeneratingDataFormItemEventArgs"/> class.
            </summary>
            <param name="dataFormItem">
            The data form item.
            </param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.AutoGeneratingDataFormItemEventArgs.#ctor(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.AutoGeneratingDataFormItemEventArgs"/> class.
            </summary>
            <param name="dataFormGroupItem">
            The data form group item.
            </param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.AutoGeneratingDataFormItemEventArgs.DataFormGroupItem">
            <summary>
            Gets or sets the auto generated <see cref="T:Syncfusion.XForms.DataForm.DataFormGroupItem"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.AutoGeneratingDataFormItemEventArgs.DataFormItem">
            <summary>
            Gets or sets the auto generated <see cref="T:Syncfusion.XForms.DataForm.DataFormItem"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.GroupItemExpandingEventArgs">
            <summary>
            Provides data for <see cref="E:Syncfusion.XForms.DataForm.SfDataForm.GroupItemExpanding"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.GroupItemExpandingEventArgs.#ctor(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.GroupItemExpandingEventArgs"/> class.
            </summary>
            <param name="dataFormGroupItem">
            The data form group item.
            </param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.GroupItemExpandingEventArgs.DataFormGroupItem">
            <summary>
            Gets the expanding <see cref="T:Syncfusion.XForms.DataForm.DataFormGroupItem"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.GroupItemExpandedEventArgs">
            <summary>
            Provides data for <see cref="E:Syncfusion.XForms.DataForm.SfDataForm.GroupItemExpanded"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.GroupItemExpandedEventArgs.#ctor(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.GroupItemExpandedEventArgs"/> class.
            </summary>
            <param name="dataFormGroupItem">
            The data form group item.
            </param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.GroupItemExpandedEventArgs.DataFormGroupItem">
            <summary>
            Gets the expanded <see cref="T:Syncfusion.XForms.DataForm.DataFormGroupItem"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.GroupItemCollapsingEventArgs">
            <summary>
            Provides data for <see cref="E:Syncfusion.XForms.DataForm.SfDataForm.GroupItemCollapsing"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.GroupItemCollapsingEventArgs.#ctor(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.GroupItemCollapsingEventArgs"/> class.
            </summary>
            <param name="dataFormGroupItem">
            The data form group item.
            </param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.GroupItemCollapsingEventArgs.DataFormGroupItem">
            <summary>
            Gets the collapsing <see cref="T:Syncfusion.XForms.DataForm.DataFormGroupItem"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.GroupItemCollapsedEventArgs">
            <summary>
            Provides data for <see cref="E:Syncfusion.XForms.DataForm.SfDataForm.GroupItemCollapsed"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.GroupItemCollapsedEventArgs.#ctor(Syncfusion.XForms.DataForm.DataFormGroupItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.GroupItemCollapsedEventArgs"/> class.
            </summary>
            <param name="dataFormGroupItem">
            The data form group item.
            </param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.GroupItemCollapsedEventArgs.DataFormGroupItem">
            <summary>
            Gets the collapsed <see cref="T:Syncfusion.XForms.DataForm.DataFormGroupItem"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidatingEventArgs">
            <summary>
            Provides data for <see cref="E:Syncfusion.XForms.DataForm.SfDataForm.Validating"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidatingEventArgs.ErrorMessage">
            <summary>
            Gets or sets a error message of <see cref="T:Syncfusion.XForms.DataForm.DataFormItem"/> in case of invalid data.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidatingEventArgs.IsValid">
            <summary>
            Gets or sets a value indicating whether the data form item is valid or not.
            </summary>
            <value><c>true</c> if is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidatingEventArgs.PropertyName">
            <summary>
            Gets a name of the <see cref="T:Syncfusion.XForms.DataForm.DataFormItem"/>.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidatingEventArgs.Value">
            <summary>
            Gets a value of data field validating.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.ValidatedEventArgs">
            <summary>
            Provides data for <see cref="E:Syncfusion.XForms.DataForm.SfDataForm.Validated"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidatedEventArgs.ErrorMessage">
            <summary>
            Gets a error message of DataFormItem in case of invalid data.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidatedEventArgs.IsValid">
            <summary>
            Gets a value indicating whether the data form item is valid or not.
            </summary>
            <value><c>true</c> if is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidatedEventArgs.PropertyName">
            <summary>
            Gets a name of the <see cref="T:Syncfusion.XForms.DataForm.DataFormItem"/>.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.ValidatedEventArgs.Value">
            <summary>
            Gets a value of data field validating.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.PropertyInfoCollection">
            <summary>
            Class that maintains the collection of <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.PropertyInfoCollection.Empty">
            <summary>
            Gets the empty property info collection.
            </summary>
            <value>The empty property info collection.</value>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the PropertyInfoCollection class.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the PropertyInfoCollection class.
            </summary>
            <param name="type">The type of the properties in the collection.</param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.PropertyInfoCollection.Type">
            <summary>
            Gets the type of the properties in the collection.
            </summary>
            <value>The type of the properties in the collection.</value>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoCollection.Find(System.String,System.Boolean)">
            <summary>
            Finds the property info of the given column name in the property info collection.
            </summary>
            <param name="columnName">The column name for which the property info is to be obtained.</param>
            <param name="matchCase">A boolean value indicating whether to consider the casing or not.</param>
            <returns>The property info of the given column name.</returns>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.PropertyInfoExtensions">
            <summary>
            Class that provides the extension methods for the property info.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoExtensions.IsIndexerProperty(System.String@,System.String@)">
            <summary>
            Determines whether the given property is the indexer property.
            </summary>
            <param name="propName">The property name which is to be determined whether it is the 
            indexer property.</param>
            <param name="indexervalue">The indexer value of the given property.</param>
            <returns><b>True</b> if the given property contains indexer, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoExtensions.GetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value for the given property info and the record.
            </summary>
            <param name="propertyInfo">The property info whose value is to be determined.</param>
            <param name="record">The object whose corresponding value for the given property is to be obtained.</param>
            <returns>The value for the given property info and the record.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoExtensions.GetValue(Syncfusion.XForms.DataForm.PropertyInfoCollection,System.Object,System.String)">
            <summary>
            Gets the value for the given property info collection, column name and the record.
            </summary>
            <param name="propertyInfoCollection">The property info collection.</param>
            <param name="record">The object whose corresponding value is to be obtained.</param>
            <param name="columnName">The column name for which the value is to be obtained.</param>
            <returns>The value for the given property info collection, column name and the record.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoExtensions.GetComplexPropertyValue(System.String[],Syncfusion.XForms.DataForm.PropertyInfoCollection,System.Object)">
            <summary>
            Gets the complex property value for the given property name list, property info collection and the record.
            </summary>
            <param name="propertyNameList">The array of property names list.</param>
            <param name="tempItemProperties">The property info collection.</param>
            <param name="record">The object whose corresponding value is to be obtained.</param>
            <returns>The complex property value for the given property name list, property info collection and the record.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoExtensions.GetPropertyInfo(Syncfusion.XForms.DataForm.PropertyInfoCollection,System.String)">
            <summary>
            Gets the property info from the given property info collection and the column name.
            </summary>
            <param name="propertyInfoCollection">The property info collection.</param>
            <param name="columnName">The column name whose property info is to be obtained.</param>
            <returns>The property info of the given property info collection and the column name.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoExtensions.GetPropertyDescriptor(Syncfusion.XForms.DataForm.PropertyInfoCollection,System.String)">
            <summary>
            Gets the property descriptor for corresponding property it may be simple or complex property.
            </summary>
            <param name="propertyInfoCollection">The property info collection.</param>
            <param name="columnName">The column name whose property descriptor is to be obtained.</param>
            <returns>The property descriptor for corresponding property it may be simple or complex property.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoExtensions.SetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Sets the value for the property info.
            </summary>
            <param name="propertyInfo">The property info whose value is to be set.</param>
            <param name="record">The record whose value of the property is to be obtained.</param>
            <param name="value">The value to be set to the given property and the corresponding record.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoExtensions.SetValue(Syncfusion.XForms.DataForm.PropertyInfoCollection,System.Object,System.Object,System.String)">
            <summary>
            Sets the value for the property info.
            </summary>
            <param name="propertyInfoCollection">The property info collection.</param>
            <param name="record">The record whose value of the property is to be obtained.</param>
            <param name="value">The value to be set to the given property and the corresponding record.</param>
            <param name="columnName">The column name whose corresponding value of the property is 
            to be obtained.</param>
            <returns>Returns a boolean value indicating whether the value is set.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.PropertyInfoExtensions.SetComplexPropertyValue(System.String[],Syncfusion.XForms.DataForm.PropertyInfoCollection,System.Object,System.Object)">
            <summary>
            Sets the value for the complex property.
            </summary>
            <param name="propertyNameList">The array of property name list.</param>
            <param name="tempItemProperties">The property info collection.</param>
            <param name="record">The record whose value of the property is to be obtained.</param>
            <param name="value">The value to be set to the given property and the corresponding record.</param>
            <returns>Returns a boolean value indicating whether the value is set.</returns>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.SfDataForm">
            <summary>
            DataForm control provides UI for editing all the public properties 
            of data object with appropriate editors based on type of property.                
            DataForm control provides options to control editing, validation of data 
            and customization of layout. 
            </summary>   
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.NativeObject">
            <summary>
            Gets or sets the native object.
            </summary>
            <value>The native object.</value>
        </member>
        <member name="E:Syncfusion.XForms.DataForm.SfDataForm.GroupItemExpanding">
            <summary>
             Occurs when user try expand a group. You can cancel the user action using this event. 
             </summary>
             <remarks>
             You can cancel the user action by using <see cref="T:Syncfusion.XForms.DataForm.GroupItemExpandingEventArgs"/>.
             </remarks>
        </member>
        <member name="E:Syncfusion.XForms.DataForm.SfDataForm.GroupItemExpanded">
            <summary>
             Occurs when group expanded by user.        
             </summary>        
        </member>
        <member name="E:Syncfusion.XForms.DataForm.SfDataForm.GroupItemCollapsing">
            <summary>
             Occurs when user try collapse a group. You can cancel the user action using this event. 
             </summary>
             <remarks>
             You can cancel the user action by using <see cref="T:Syncfusion.XForms.DataForm.GroupItemCollapsingEventArgs"/>.
             </remarks>
        </member>
        <member name="E:Syncfusion.XForms.DataForm.SfDataForm.GroupItemCollapsed">
            <summary>
             Occurs when group gets collapsed by user.             
             </summary>
        </member>
        <member name="E:Syncfusion.XForms.DataForm.SfDataForm.Validating">
            <summary>
            Occurs when <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/> validates the user input.
            </summary>
        </member>
        <member name="E:Syncfusion.XForms.DataForm.SfDataForm.Validated">
            <summary>
            Occurs after completion of user input validation.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.ItemManager">
            <summary>
            Gets or sets the item manager.
            </summary>
            <value>The item manager.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.LayoutManager">
            <summary>
            Gets or sets the layout manager.
            </summary>
            <value>The layout manager.</value>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.DataObject">
            <summary>
            Gets or sets a data object to view or edit the properties.
            DataForm generates the editors and labels from the public properties of data object. 
            </summary>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.SfDataForm.DataObjectProperty">
            <summary>
            Identifies the DataObject bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.CommitMode">
            <summary>
            Gets or sets the value that determines, when the value entered by user should be saved to the data object. 
            </summary>
            The default value is <see cref="F:Syncfusion.XForms.DataForm.CommitMode.LostFocus"/>.
            <value>The commit mode.</value>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.SfDataForm.CommitModeProperty">
            <summary>
            Identifies the CommitMode bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.ColumnCount">
            <summary>
            Gets or sets the value denotes the number of editor to be arranged per row. 
            Be default one editor for one property arranged with label. 
            </summary>
            <value>The default value is one.</value>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.SfDataForm.ColumnCountProperty">
            <summary>
            Identifies the ColumnCount bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.ValidationMode">
            <summary>
            Gets or sets a value that denotes when the user input should be validated 
            based on <see cref="!:IDataErrorInfo"/> and <see cref="!:System.ComponentModel.DataAnnotations.ValidationAttribute"/>.
            </summary>  
            <value>
            One of the <see cref="T:Syncfusion.XForms.DataForm.ValidationMode"/> enum.
            The default value is <see cref="F:Syncfusion.XForms.DataForm.ValidationMode.LostFocus"/>.
            </value>       
            <remarks>
            The <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/> process the built-in validations when data object implements 
            <see cref="!:System.ComponentModel.IDataErrorInfo"/> or property defined with <see cref="!:System.ComponentModel.DataAnnotations.ValidationAttribute"/>.
            The validation can be performed explicitly by handling <see cref="E:Syncfusion.XForms.DataForm.SfDataForm.Validating"/>.
            </remarks>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.SfDataForm.ValidationModeProperty">
            <summary>
            Identifies the ValidationMode bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.LabelPosition">
            <summary>
            Gets or sets the value denotes how to layout the label associated with editor. 
            Label's can be positioned either at the top or left side of editor.
            </summary>
            <value>
            The default value is <see cref="F:Syncfusion.XForms.DataForm.LabelPosition.Left"/>.
            </value>  
        </member>
        <member name="F:Syncfusion.XForms.DataForm.SfDataForm.LabelPositionProperty">
            <summary>
            Identifies the LabelPosition bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.LabelWidth">
            <summary>
            Gets or sets the value that splits the width for label from DataFormItemView.
            </summary>
            <value>The width of the label.</value>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.SfDataForm.LabelWidthProperty">
            <summary>
            Identifies the LabelWidth bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.EditorWidth">
            <summary>
            Gets or sets the value that splits the width for editor from DataFormItemView.
            </summary>
            <value>The width of the editor.</value>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.SfDataForm.EditorWidthProperty">
            <summary>
            Identifies the EditorWidth bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.IsReadOnly">
            <summary>
            Gets or sets a value that indicates whether editors enabled for editing. 
            </summary>       
            <value>
            The default value is false.
            </value>
            <remarks>
            <see cref="P:Syncfusion.XForms.DataForm.DataFormItem.IsReadOnly"/> takes higher priority when explicit defined. 
            Editors can be enabled or disabled for particular property by setting <see cref="P:Syncfusion.XForms.DataForm.DataFormItem.IsReadOnly"/> in <see cref="E:Syncfusion.XForms.DataForm.SfDataForm.AutoGeneratingDataFormItem"/>.
            Editors can be enabled or disabled for particular property by setting <see cref="!:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit"/>.
            </remarks>
        </member>
        <member name="F:Syncfusion.XForms.DataForm.SfDataForm.IsReadOnlyProperty">
            <summary>
            Identifies the IsReadOnly bindable property.
            </summary>
            <remarks>This bindable property is read-only.</remarks>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.SfDataForm.SourceProvider">
            <summary>
            Gets or sets the reference to the <see cref="T:Syncfusion.XForms.DataForm.SourceProvider"/> instance which is used to get the source for picker type editors.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RegisterEditor(System.String,Syncfusion.XForms.DataForm.Editors.DataFormEditorBase)">
            <summary>
            Register a customzied editor.
            </summary>
            <param name="editorName"></param>
            <param name="dataFormEditor"></param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RegisterEditor(System.String,System.String)">
            <summary>
            Registers editor for property name.
            </summary>
            <param name="propertyName">The propertyName to have editor.</param>
            <param name="editor">The editor that loaded for property name.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RegisterEditor(System.Type,System.String)">
            <summary>
            Registers editor for property type.
            </summary>
            <param name="type">The type to have editor.</param>
            <param name="editor">The editor that loaded for type.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.Commit">
            <summary>
            Commits all property values in data form items.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.Commit(System.String)">
            <summary>
            Commits the value of the specific property.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.Validate">
            <summary>
            Validates all property values of data form items.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.Validate(System.String)">
            <summary>
            Validates the value of the specific property.
            </summary>
            <param name="propertyName">The property to be validated.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.UpdateEditor(System.String)">
            <summary>
            Updates the value of the specific property in corresponding editor.
            </summary>
            <param name="propertyName">The property to be updated.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.ExpandGroup(System.String)">
            <summary>
            Expands group by group name.
            </summary>
            <param name="groupName">The name of the group.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.CollapseGroup(System.String)">
            <summary>
            Collapse group by group name.
            </summary>
            <param name="groupName">The name of the group.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.GetGroupExpanderIcon">
            <summary>
            Gets the Resource ID from the Android resources for group expander icon.
            </summary>
            <returns>The group expander icon.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.GetGroupCollapseIcon">
            <summary>
             Gets the Resource ID from the Android resources for the group collapse icon.
            </summary>
            <returns>The group collapse icon.</returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RefreshLayout(System.Boolean)">
            <summary>
            Loads more fields when the user wants to generate the fields that was canceled.
            </summary>
            <param name="generateAllItems">
            <b>True</b> to regenerate all the items from the committed data object. <b>false</b> only generate the field that was canceled initially.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/> object.
            </summary>
            <remarks>Call <see cref="M:Syncfusion.XForms.DataForm.SfDataForm.Dispose"/> when you are finished using the
            <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>. The <see cref="M:Syncfusion.XForms.DataForm.SfDataForm.Dispose"/> method leaves the
            <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/> in an unusable state. After calling
            <see cref="M:Syncfusion.XForms.DataForm.SfDataForm.Dispose"/>, you must release all references to the
            <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/> so the garbage collector can reclaim the memory that
            the <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/> was occupying.</remarks>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RaiseAutoGeneratingEvent(Syncfusion.XForms.DataForm.AutoGeneratingDataFormItemEventArgs)">
            <summary>
            Raises the auto generating event.
            </summary>
            <returns>The auto generating event args.</returns>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RaiseExpandingEvent(Syncfusion.XForms.DataForm.GroupItemExpandingEventArgs)">
            <summary>
            Raises the DataFormgroupItem expanding event.
            </summary>
            <returns>The expanding event args.</returns>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RaiseExpandedEvent(Syncfusion.XForms.DataForm.GroupItemExpandedEventArgs)">
            <summary>
            Raises the DataFormgroupItem expanded event.
            </summary>
            <returns>The expanded event args.</returns>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RaiseCollapsingEvent(Syncfusion.XForms.DataForm.GroupItemCollapsingEventArgs)">
            <summary>
             Raises the DataFormgroupItem collapsing event.
            </summary>
            <returns>The collapsing event args.</returns>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RaiseCollapsedEvent(Syncfusion.XForms.DataForm.GroupItemCollapsedEventArgs)">
            <summary>
             Raises the DataFormgroupItem collapsed event.
            </summary>
            <returns>The collapsed event args.</returns>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RaiseDataFormItemValidatingEvent(Syncfusion.XForms.DataForm.ValidatingEventArgs)">
            <summary>
            Raises the DataFormItemValidating event.
            </summary>
            <returns>The DataFormItemValidating args.</returns>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.RaiseDataFormItemValidatedEvent(Syncfusion.XForms.DataForm.ValidatedEventArgs)">
            <summary>
            Raises the DataFormItemValidated event.
            </summary>
            <returns>The DataFormItemValidated args.</returns>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.SfDataForm.Dispose(System.Boolean)">
            <summary>
            Dispose the specified isDisposing.
            </summary>
            <returns>The dispose.</returns>
            <param name="isDisposing">If set to <c>true</c> is disposing.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.DataFormItems">
            <summary>
            Represents a collection that maintains the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemBase"/> which encapsulates the layout and editor setting for a data field appearing in <see cref="T:Syncfusion.XForms.DataForm.SfDataForm"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItems.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemBase"/> for the index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItems.Item(System.String)">
            <summary>
            Returns the <see cref="T:Syncfusion.XForms.DataForm.DataFormItem"/> associated with data field. 
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.DataFormItems.Item(System.Int32,System.Int32)">
            <summary>
            Returns the <see cref="T:Syncfusion.XForms.DataForm.DataFormItemBase"/> based on row and column index.
            </summary>
            <param name="rowIndex"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItems.Dispose">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.XForms.DataForm.DataFormItems"/> class.
            </summary>  
        </member>
        <member name="M:Syncfusion.XForms.DataForm.DataFormItems.Dispose(System.Boolean)">
            <summary>
            Disposes all the resources used by the <see cref="T:Syncfusion.XForms.DataForm.DataFormItems"/> class.
            </summary>
            <param name="isDisposing">Indicates whether the call is from Dispose method or from a finalizer.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.CheckBox">
            <summary>
            Reprsents a class to render the bool as CheckBox control.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.CheckBox.#ctor">
            <summary>
            Initialize instance for <see cref="T:Syncfusion.XForms.DataForm.CheckBox"/>
            </summary>
        </member>
        <member name="E:Syncfusion.XForms.DataForm.CheckBox.CheckedChange">
            <summary>
            Occurs when chaning the Checked value.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.CheckBox.RaiseCheckedEvent(Syncfusion.XForms.DataForm.CheckedChangeEventArgs)">
            <summary>
            Raises Checked event when the Checked value is changed.
            </summary>
            <param name="args">The CheckedChangedEventArgs.</param>
        </member>
        <member name="T:Syncfusion.XForms.DataForm.CheckedChangeEventArgs">
            <summary>
            Provides data for <see cref="E:Syncfusion.XForms.DataForm.CheckBox.CheckedChange"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.XForms.DataForm.CheckedChangeEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.XForms.DataForm.CheckedChangeEventArgs"/> class.
            </summary>
            <param name="isChecked">
            The Checked value.
            </param>
        </member>
        <member name="P:Syncfusion.XForms.DataForm.CheckedChangeEventArgs.IsChecked">
            <summary>
            Gets the changed value of <see cref="P:Syncfusion.XForms.DataForm.CheckBox.Checked"/> property.
            </summary>
        </member>
    </members>
</doc>
